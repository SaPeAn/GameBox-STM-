
GameBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000224c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002394  08002394  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002394  08002394  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002394  08002394  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002394  08002394  00012394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002398  08002398  00012398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800239c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000000c  080023a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  080023a8  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013400  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b56  00000000  00000000  00033435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000100f5  00000000  00000000  00035f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  00046080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021f8  00000000  00000000  00046ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017ee1  00000000  00000000  00048d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016425  00000000  00000000  00060c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d2b1  00000000  00000000  0007709e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010434f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002718  00000000  00000000  001043a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002340 	.word	0x08002340

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002340 	.word	0x08002340

0800014c <lcd_init>:
uint8_t str_null[] = "NULL";

extern SPI_HandleTypeDef hspi2;

void lcd_init(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
  DISP_RESET_OFF;
 800014e:	2201      	movs	r2, #1
{
 8000150:	b087      	sub	sp, #28
  DISP_RESET_OFF;
 8000152:	2104      	movs	r1, #4
 8000154:	482d      	ldr	r0, [pc, #180]	; (800020c <lcd_init+0xc0>)
 8000156:	f000 febb 	bl	8000ed0 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_DAT;
 800015a:	2201      	movs	r2, #1
 800015c:	2102      	movs	r1, #2
 800015e:	482b      	ldr	r0, [pc, #172]	; (800020c <lcd_init+0xc0>)
 8000160:	f000 feb6 	bl	8000ed0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000164:	2002      	movs	r0, #2
 8000166:	f000 fbd3 	bl	8000910 <HAL_Delay>
  DISP_RESET_ON;
 800016a:	2200      	movs	r2, #0
 800016c:	2104      	movs	r1, #4
 800016e:	4827      	ldr	r0, [pc, #156]	; (800020c <lcd_init+0xc0>)
 8000170:	f000 feae 	bl	8000ed0 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8000174:	2002      	movs	r0, #2
 8000176:	f000 fbcb 	bl	8000910 <HAL_Delay>
  DISP_RESET_OFF;
 800017a:	2201      	movs	r2, #1
 800017c:	2104      	movs	r1, #4
 800017e:	4823      	ldr	r0, [pc, #140]	; (800020c <lcd_init+0xc0>)
 8000180:	f000 fea6 	bl	8000ed0 <HAL_GPIO_WritePin>
  DISP_INIT_SEND_COM;
 8000184:	2200      	movs	r2, #0
 8000186:	2102      	movs	r1, #2
 8000188:	4820      	ldr	r0, [pc, #128]	; (800020c <lcd_init+0xc0>)
 800018a:	f000 fea1 	bl	8000ed0 <HAL_GPIO_WritePin>
  uint8_t init_data_array[13] = {
 800018e:	4b20      	ldr	r3, [pc, #128]	; (8000210 <lcd_init+0xc4>)
 8000190:	ac02      	add	r4, sp, #8
 8000192:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000194:	c407      	stmia	r4!, {r0, r1, r2}
	(0x10 | 0),       // Column Address Set - first byte (0-15)
	(0x00 | 0),       // Column Address Set - second byte (0-15)
	(0xAE | 1),       // Display on(1) / Display off (0)
	(0xA6 | 0),       // Display Normal(0) / Display Reverse(1)
  };
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 8000196:	220d      	movs	r2, #13
  uint8_t init_data_array[13] = {
 8000198:	7023      	strb	r3, [r4, #0]
  HAL_SPI_Transmit(&hspi2, init_data_array, 13, 20);
 800019a:	a902      	add	r1, sp, #8
 800019c:	2314      	movs	r3, #20
 800019e:	481d      	ldr	r0, [pc, #116]	; (8000214 <lcd_init+0xc8>)
 80001a0:	f001 fd52 	bl	8001c48 <HAL_SPI_Transmit>
}

void lcd_buferase(void)
{
  for(uint8_t j = 0; j < 8; j++)
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 80001a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001a8:	2100      	movs	r1, #0
 80001aa:	481b      	ldr	r0, [pc, #108]	; (8000218 <lcd_init+0xcc>)
 80001ac:	f002 f8c0 	bl	8002330 <memset>
 80001b0:	24b0      	movs	r4, #176	; 0xb0
 80001b2:	4d19      	ldr	r5, [pc, #100]	; (8000218 <lcd_init+0xcc>)
  DISP_INIT_SEND_COM;
 80001b4:	4f15      	ldr	r7, [pc, #84]	; (800020c <lcd_init+0xc0>)
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 80001b6:	4e17      	ldr	r6, [pc, #92]	; (8000214 <lcd_init+0xc8>)
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 80001b8:	2200      	movs	r2, #0
 80001ba:	2310      	movs	r3, #16
  DISP_INIT_SEND_COM;
 80001bc:	2102      	movs	r1, #2
 80001be:	4638      	mov	r0, r7
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 80001c0:	f88d 4004 	strb.w	r4, [sp, #4]
 80001c4:	f88d 3005 	strb.w	r3, [sp, #5]
 80001c8:	f88d 2006 	strb.w	r2, [sp, #6]
  DISP_INIT_SEND_COM;
 80001cc:	f000 fe80 	bl	8000ed0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 80001d0:	230a      	movs	r3, #10
 80001d2:	2203      	movs	r2, #3
 80001d4:	a901      	add	r1, sp, #4
 80001d6:	4630      	mov	r0, r6
 80001d8:	f001 fd36 	bl	8001c48 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 80001dc:	3401      	adds	r4, #1
  DISP_INIT_SEND_DAT;
 80001de:	2201      	movs	r2, #1
 80001e0:	2102      	movs	r1, #2
 80001e2:	4638      	mov	r0, r7
 80001e4:	f000 fe74 	bl	8000ed0 <HAL_GPIO_WritePin>
  for(uint8_t j = 0; j < 8; j++)
 80001e8:	b2e4      	uxtb	r4, r4
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 80001ea:	4629      	mov	r1, r5
 80001ec:	230a      	movs	r3, #10
 80001ee:	2280      	movs	r2, #128	; 0x80
 80001f0:	4630      	mov	r0, r6
 80001f2:	f001 fd29 	bl	8001c48 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 80001f6:	2cb8      	cmp	r4, #184	; 0xb8
 80001f8:	f105 0580 	add.w	r5, r5, #128	; 0x80
 80001fc:	d1dc      	bne.n	80001b8 <lcd_init+0x6c>
  DISP_INIT_SEND_DAT;
 80001fe:	2201      	movs	r2, #1
 8000200:	2102      	movs	r1, #2
 8000202:	4802      	ldr	r0, [pc, #8]	; (800020c <lcd_init+0xc0>)
 8000204:	f000 fe64 	bl	8000ed0 <HAL_GPIO_WritePin>
}
 8000208:	b007      	add	sp, #28
 800020a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800020c:	40010800 	.word	0x40010800
 8000210:	08002358 	.word	0x08002358
 8000214:	2000046c 	.word	0x2000046c
 8000218:	20000028 	.word	0x20000028

0800021c <lcd_bufupload>:
{
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	24b0      	movs	r4, #176	; 0xb0
 8000220:	4d14      	ldr	r5, [pc, #80]	; (8000274 <lcd_bufupload+0x58>)
  DISP_INIT_SEND_COM;
 8000222:	4f15      	ldr	r7, [pc, #84]	; (8000278 <lcd_bufupload+0x5c>)
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000224:	4e15      	ldr	r6, [pc, #84]	; (800027c <lcd_bufupload+0x60>)
{
 8000226:	b083      	sub	sp, #12
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000228:	2200      	movs	r2, #0
 800022a:	2310      	movs	r3, #16
  DISP_INIT_SEND_COM;
 800022c:	2102      	movs	r1, #2
 800022e:	4638      	mov	r0, r7
	uint8_t tmp_arr[] = {(0xB0 + j), 0x10, 0x00};
 8000230:	f88d 4004 	strb.w	r4, [sp, #4]
 8000234:	f88d 3005 	strb.w	r3, [sp, #5]
 8000238:	f88d 2006 	strb.w	r2, [sp, #6]
  DISP_INIT_SEND_COM;
 800023c:	f000 fe48 	bl	8000ed0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, N, 10);
 8000240:	230a      	movs	r3, #10
 8000242:	2203      	movs	r2, #3
 8000244:	a901      	add	r1, sp, #4
 8000246:	4630      	mov	r0, r6
 8000248:	f001 fcfe 	bl	8001c48 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 800024c:	3401      	adds	r4, #1
  DISP_INIT_SEND_DAT;
 800024e:	2201      	movs	r2, #1
 8000250:	2102      	movs	r1, #2
 8000252:	4638      	mov	r0, r7
 8000254:	f000 fe3c 	bl	8000ed0 <HAL_GPIO_WritePin>
  for(uint8_t j = 0; j < 8; j++)
 8000258:	b2e4      	uxtb	r4, r4
    HAL_SPI_Transmit(&hspi2, dispbuffer[j], 128, 10);
 800025a:	4629      	mov	r1, r5
 800025c:	230a      	movs	r3, #10
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	4630      	mov	r0, r6
 8000262:	f001 fcf1 	bl	8001c48 <HAL_SPI_Transmit>
  for(uint8_t j = 0; j < 8; j++)
 8000266:	2cb8      	cmp	r4, #184	; 0xb8
 8000268:	f105 0580 	add.w	r5, r5, #128	; 0x80
 800026c:	d1dc      	bne.n	8000228 <lcd_bufupload+0xc>
}
 800026e:	b003      	add	sp, #12
 8000270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000272:	bf00      	nop
 8000274:	20000028 	.word	0x20000028
 8000278:	40010800 	.word	0x40010800
 800027c:	2000046c 	.word	0x2000046c

08000280 <lcd_buferase>:
    for(uint8_t i = 0; i < 128; i++) dispbuffer[j][i] = 0;
 8000280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000284:	2100      	movs	r1, #0
 8000286:	4801      	ldr	r0, [pc, #4]	; (800028c <lcd_buferase+0xc>)
 8000288:	f002 b852 	b.w	8002330 <memset>
 800028c:	20000028 	.word	0x20000028

08000290 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000290:	2300      	movs	r3, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000292:	2005      	movs	r0, #5
 8000294:	f44f 3180 	mov.w	r1, #65536	; 0x10000
{
 8000298:	b530      	push	{r4, r5, lr}
 800029a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800029c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002a0:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80002b0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b4:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b8:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002bc:	9300      	str	r3, [sp, #0]
 80002be:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	e9cd 220d 	strd	r2, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ca:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002cc:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ce:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d0:	f000 fe08 	bl	8000ee4 <HAL_RCC_OscConfig>
 80002d4:	b108      	cbz	r0, 80002da <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002d6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	220f      	movs	r2, #15
 80002dc:	2302      	movs	r3, #2
 80002de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e8:	9008      	str	r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	4621      	mov	r1, r4
 80002ec:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f2:	f000 ffe7 	bl	80012c4 <HAL_RCC_ClockConfig>
 80002f6:	b108      	cbz	r0, 80002fc <SystemClock_Config+0x6c>
 80002f8:	b672      	cpsid	i
  while (1)
 80002fa:	e7fe      	b.n	80002fa <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80002fc:	2403      	movs	r4, #3
 80002fe:	f44f 7580 	mov.w	r5, #256	; 0x100
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000306:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000308:	e9cd 4500 	strd	r4, r5, [sp]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800030c:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030e:	f001 f8b9 	bl	8001484 <HAL_RCCEx_PeriphCLKConfig>
 8000312:	b108      	cbz	r0, 8000318 <SystemClock_Config+0x88>
 8000314:	b672      	cpsid	i
  while (1)
 8000316:	e7fe      	b.n	8000316 <SystemClock_Config+0x86>
}
 8000318:	b015      	add	sp, #84	; 0x54
 800031a:	bd30      	pop	{r4, r5, pc}

0800031c <main>:
{
 800031c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000320:	2400      	movs	r4, #0
{
 8000322:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8000324:	f000 fad0 	bl	80008c8 <HAL_Init>
  SystemClock_Config();
 8000328:	f7ff ffb2 	bl	8000290 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000330:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000334:	4b9b      	ldr	r3, [pc, #620]	; (80005a4 <main+0x288>)
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000338:	699e      	ldr	r6, [r3, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 800033a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	f046 0610 	orr.w	r6, r6, #16
 8000342:	619e      	str	r6, [r3, #24]
 8000344:	699e      	ldr	r6, [r3, #24]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000346:	4898      	ldr	r0, [pc, #608]	; (80005a8 <main+0x28c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000348:	f006 0610 	and.w	r6, r6, #16
 800034c:	9600      	str	r6, [sp, #0]
 800034e:	9e00      	ldr	r6, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000350:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000352:	4617      	mov	r7, r2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000354:	f046 0620 	orr.w	r6, r6, #32
 8000358:	619e      	str	r6, [r3, #24]
 800035a:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 800035c:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000360:	f006 0620 	and.w	r6, r6, #32
 8000364:	9601      	str	r6, [sp, #4]
 8000366:	9e01      	ldr	r6, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	699e      	ldr	r6, [r3, #24]
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 800036a:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800036e:	f046 0604 	orr.w	r6, r6, #4
 8000372:	619e      	str	r6, [r3, #24]
 8000374:	699e      	ldr	r6, [r3, #24]
  hadc1.Instance = ADC1;
 8000376:	4d8d      	ldr	r5, [pc, #564]	; (80005ac <main+0x290>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	f006 0604 	and.w	r6, r6, #4
 800037c:	9602      	str	r6, [sp, #8]
 800037e:	9e02      	ldr	r6, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	699e      	ldr	r6, [r3, #24]
 8000382:	f046 0608 	orr.w	r6, r6, #8
 8000386:	619e      	str	r6, [r3, #24]
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0308 	and.w	r3, r3, #8
 800038e:	9303      	str	r3, [sp, #12]
 8000390:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(SHUTDOWN_GPIO_Port, SHUTDOWN_Pin, GPIO_PIN_SET);
 8000392:	f000 fd9d 	bl	8000ed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DISP_RS_Pin|DISP_RSE_Pin, GPIO_PIN_RESET);
 8000396:	4622      	mov	r2, r4
 8000398:	2106      	movs	r1, #6
 800039a:	4885      	ldr	r0, [pc, #532]	; (80005b0 <main+0x294>)
 800039c:	f000 fd98 	bl	8000ed0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 80003a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003a4:	2311      	movs	r3, #17
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 80003a6:	4880      	ldr	r0, [pc, #512]	; (80005a8 <main+0x28c>)
 80003a8:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = SHUTDOWN_Pin;
 80003aa:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80003ae:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(SHUTDOWN_GPIO_Port, &GPIO_InitStruct);
 80003b2:	f000 fc7f 	bl	8000cb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 80003b6:	2206      	movs	r2, #6
 80003b8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ba:	487d      	ldr	r0, [pc, #500]	; (80005b0 <main+0x294>)
 80003bc:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = DISP_RS_Pin|DISP_RSE_Pin;
 80003be:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80003c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003c6:	f000 fc75 	bl	8000cb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 80003ca:	2208      	movs	r2, #8
 80003cc:	2300      	movs	r3, #0
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 80003ce:	4878      	ldr	r0, [pc, #480]	; (80005b0 <main+0x294>)
 80003d0:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = JOYSTICK_BTN_Pin;
 80003d2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003d6:	9710      	str	r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(JOYSTICK_BTN_GPIO_Port, &GPIO_InitStruct);
 80003d8:	f000 fc6c 	bl	8000cb4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 80003dc:	22f0      	movs	r2, #240	; 0xf0
 80003de:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e0:	4874      	ldr	r0, [pc, #464]	; (80005b4 <main+0x298>)
 80003e2:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 80003e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003e8:	9710      	str	r7, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ea:	f000 fc63 	bl	8000cb4 <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80003ee:	4b72      	ldr	r3, [pc, #456]	; (80005b8 <main+0x29c>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 80003f8:	602b      	str	r3, [r5, #0]
  hadc1.Init.NbrOfConversion = 4;
 80003fa:	2304      	movs	r3, #4
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003fc:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80003fe:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8000402:	9410      	str	r4, [sp, #64]	; 0x40
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000404:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000406:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	606c      	str	r4, [r5, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800040a:	60a9      	str	r1, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800040c:	61ea      	str	r2, [r5, #28]
  hadc1.Init.NbrOfConversion = 4;
 800040e:	612b      	str	r3, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000410:	f000 fa90 	bl	8000934 <HAL_ADC_Init>
 8000414:	b108      	cbz	r0, 800041a <main+0xfe>
 8000416:	b672      	cpsid	i
  while (1)
 8000418:	e7fe      	b.n	8000418 <main+0xfc>
  sConfig.Channel = ADC_CHANNEL_0;
 800041a:	2600      	movs	r6, #0
 800041c:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800041e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000420:	4628      	mov	r0, r5
 8000422:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_0;
 8000424:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000428:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042a:	f000 fb41 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 800042e:	b108      	cbz	r0, 8000434 <main+0x118>
 8000430:	b672      	cpsid	i
  while (1)
 8000432:	e7fe      	b.n	8000432 <main+0x116>
  sConfig.Channel = ADC_CHANNEL_8;
 8000434:	2208      	movs	r2, #8
 8000436:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	4628      	mov	r0, r5
 800043a:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_8;
 800043c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000440:	f000 fb36 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 8000444:	b108      	cbz	r0, 800044a <main+0x12e>
 8000446:	b672      	cpsid	i
  while (1)
 8000448:	e7fe      	b.n	8000448 <main+0x12c>
  sConfig.Channel = ADC_CHANNEL_9;
 800044a:	2209      	movs	r2, #9
 800044c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800044e:	4628      	mov	r0, r5
 8000450:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 8000452:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000456:	f000 fb2b 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 800045a:	b108      	cbz	r0, 8000460 <main+0x144>
 800045c:	b672      	cpsid	i
  while (1)
 800045e:	e7fe      	b.n	800045e <main+0x142>
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000460:	2304      	movs	r3, #4
 8000462:	2211      	movs	r2, #17
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000464:	4628      	mov	r0, r5
 8000466:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000468:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	f000 fb20 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 8000470:	4603      	mov	r3, r0
 8000472:	b108      	cbz	r0, 8000478 <main+0x15c>
 8000474:	b672      	cpsid	i
  while (1)
 8000476:	e7fe      	b.n	8000476 <main+0x15a>
  hspi2.Instance = SPI2;
 8000478:	4850      	ldr	r0, [pc, #320]	; (80005bc <main+0x2a0>)
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800047a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800047e:	2208      	movs	r2, #8
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000480:	f44f 7482 	mov.w	r4, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000484:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000488:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800048c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000490:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000492:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000494:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Instance = SPI2;
 8000498:	4a49      	ldr	r2, [pc, #292]	; (80005c0 <main+0x2a4>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800049a:	6044      	str	r4, [r0, #4]
  hspi2.Instance = SPI2;
 800049c:	6002      	str	r2, [r0, #0]
  hspi2.Init.CRCPolynomial = 10;
 800049e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80004a0:	f001 fb74 	bl	8001b8c <HAL_SPI_Init>
 80004a4:	4604      	mov	r4, r0
 80004a6:	b108      	cbz	r0, 80004ac <main+0x190>
 80004a8:	b672      	cpsid	i
  while (1)
 80004aa:	e7fe      	b.n	80004aa <main+0x18e>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ac:	2220      	movs	r2, #32
 80004ae:	4601      	mov	r1, r0
 80004b0:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004b6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80004ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80004be:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c2:	9404      	str	r4, [sp, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004c4:	f001 ff34 	bl	8002330 <memset>
  htim1.Init.Period = 65535;
 80004c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim1.Instance = TIM1;
 80004cc:	4d3d      	ldr	r5, [pc, #244]	; (80005c4 <main+0x2a8>)
 80004ce:	4a3e      	ldr	r2, [pc, #248]	; (80005c8 <main+0x2ac>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d0:	4628      	mov	r0, r5
  htim1.Instance = TIM1;
 80004d2:	e9c5 2400 	strd	r2, r4, [r5]
  htim1.Init.RepetitionCounter = 0;
 80004d6:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004da:	60ac      	str	r4, [r5, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004dc:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 65535;
 80004de:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004e0:	f001 fce0 	bl	8001ea4 <HAL_TIM_PWM_Init>
 80004e4:	b108      	cbz	r0, 80004ea <main+0x1ce>
 80004e6:	b672      	cpsid	i
  while (1)
 80004e8:	e7fe      	b.n	80004e8 <main+0x1cc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ea:	2600      	movs	r6, #0
 80004ec:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ee:	4628      	mov	r0, r5
 80004f0:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004f6:	f001 fe9b 	bl	8002230 <HAL_TIMEx_MasterConfigSynchronization>
 80004fa:	4602      	mov	r2, r0
 80004fc:	b108      	cbz	r0, 8000502 <main+0x1e6>
 80004fe:	b672      	cpsid	i
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x1e4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000502:	f04f 0860 	mov.w	r8, #96	; 0x60
 8000506:	f24c 3950 	movw	r9, #50000	; 0xc350
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800050a:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800050c:	a906      	add	r1, sp, #24
 800050e:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000510:	e9cd 6708 	strd	r6, r7, [sp, #32]
 8000514:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8000518:	e9cd 8906 	strd	r8, r9, [sp, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800051c:	f001 fd8c 	bl	8002038 <HAL_TIM_PWM_ConfigChannel>
 8000520:	b108      	cbz	r0, 8000526 <main+0x20a>
 8000522:	b672      	cpsid	i
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x208>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800052c:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800052e:	a90e      	add	r1, sp, #56	; 0x38
 8000530:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000532:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8000536:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800053a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800053e:	f001 fea9 	bl	8002294 <HAL_TIMEx_ConfigBreakDeadTime>
 8000542:	b108      	cbz	r0, 8000548 <main+0x22c>
 8000544:	b672      	cpsid	i
  while (1)
 8000546:	e7fe      	b.n	8000546 <main+0x22a>
  HAL_TIM_MspPostInit(&htim1);
 8000548:	481e      	ldr	r0, [pc, #120]	; (80005c4 <main+0x2a8>)
 800054a:	f000 f933 	bl	80007b4 <HAL_TIM_MspPostInit>
  RTC_TimeTypeDef sTime = {0};
 800054e:	2300      	movs	r3, #0
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000550:	f04f 32ff 	mov.w	r2, #4294967295
  hrtc.Instance = RTC;
 8000554:	4c1d      	ldr	r4, [pc, #116]	; (80005cc <main+0x2b0>)
  RTC_TimeTypeDef sTime = {0};
 8000556:	f8ad 3018 	strh.w	r3, [sp, #24]
 800055a:	f88d 301a 	strb.w	r3, [sp, #26]
  RTC_DateTypeDef DateToUpdate = {0};
 800055e:	930e      	str	r3, [sp, #56]	; 0x38
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000560:	60a3      	str	r3, [r4, #8]
  hrtc.Instance = RTC;
 8000562:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <main+0x2b4>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000564:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000566:	6062      	str	r2, [r4, #4]
  hrtc.Instance = RTC;
 8000568:	6023      	str	r3, [r4, #0]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800056a:	f001 f8b7 	bl	80016dc <HAL_RTC_Init>
 800056e:	b108      	cbz	r0, 8000574 <main+0x258>
 8000570:	b672      	cpsid	i
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x256>
  sTime.Hours = 0x0;
 8000574:	f8ad 0018 	strh.w	r0, [sp, #24]
  sTime.Seconds = 0x0;
 8000578:	f88d 001a 	strb.w	r0, [sp, #26]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800057c:	2201      	movs	r2, #1
 800057e:	4620      	mov	r0, r4
 8000580:	a906      	add	r1, sp, #24
 8000582:	f001 f92b 	bl	80017dc <HAL_RTC_SetTime>
 8000586:	b108      	cbz	r0, 800058c <main+0x270>
 8000588:	b672      	cpsid	i
  while (1)
 800058a:	e7fe      	b.n	800058a <main+0x26e>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <main+0x2b8>)
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800058e:	4620      	mov	r0, r4
 8000590:	2201      	movs	r2, #1
 8000592:	a90e      	add	r1, sp, #56	; 0x38
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000594:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000596:	f001 f9ad 	bl	80018f4 <HAL_RTC_SetDate>
 800059a:	4604      	mov	r4, r0
 800059c:	b1e0      	cbz	r0, 80005d8 <main+0x2bc>
 800059e:	b672      	cpsid	i
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x284>
 80005a2:	bf00      	nop
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40011000 	.word	0x40011000
 80005ac:	20000428 	.word	0x20000428
 80005b0:	40010800 	.word	0x40010800
 80005b4:	40010c00 	.word	0x40010c00
 80005b8:	40012400 	.word	0x40012400
 80005bc:	2000046c 	.word	0x2000046c
 80005c0:	40003800 	.word	0x40003800
 80005c4:	200004c4 	.word	0x200004c4
 80005c8:	40012c00 	.word	0x40012c00
 80005cc:	20000458 	.word	0x20000458
 80005d0:	40002800 	.word	0x40002800
 80005d4:	00010101 	.word	0x00010101
  lcd_init();
 80005d8:	f7ff fdb8 	bl	800014c <lcd_init>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 80005dc:	f44f 4230 	mov.w	r2, #45056	; 0xb000
 80005e0:	682b      	ldr	r3, [r5, #0]
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e2:	4621      	mov	r1, r4
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 80005e4:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x2f0>)
 80005e8:	4c09      	ldr	r4, [pc, #36]	; (8000610 <main+0x2f4>)
 80005ea:	f001 fcc9 	bl	8001f80 <HAL_TIM_PWM_Start>
  lcd_buferase();
 80005ee:	f7ff fe47 	bl	8000280 <lcd_buferase>
  	if((HAL_GetTick() - temp_tick) > 50)
 80005f2:	f000 f987 	bl	8000904 <HAL_GetTick>
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	1ac3      	subs	r3, r0, r3
 80005fa:	2b32      	cmp	r3, #50	; 0x32
 80005fc:	d9f9      	bls.n	80005f2 <main+0x2d6>
      temp_tick = HAL_GetTick();
 80005fe:	f000 f981 	bl	8000904 <HAL_GetTick>
 8000602:	6020      	str	r0, [r4, #0]
      lcd_bufupload();
 8000604:	f7ff fe0a 	bl	800021c <lcd_bufupload>
 8000608:	e7f3      	b.n	80005f2 <main+0x2d6>
 800060a:	bf00      	nop
 800060c:	200004c4 	.word	0x200004c4
 8000610:	2000050c 	.word	0x2000050c

08000614 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <HAL_MspInit+0x3c>)
{
 8000616:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000618:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800061a:	490e      	ldr	r1, [pc, #56]	; (8000654 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800061c:	f042 0201 	orr.w	r2, r2, #1
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	699a      	ldr	r2, [r3, #24]
 8000624:	f002 0201 	and.w	r2, r2, #1
 8000628:	9200      	str	r2, [sp, #0]
 800062a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	69da      	ldr	r2, [r3, #28]
 800062e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063e:	684b      	ldr	r3, [r1, #4]
 8000640:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000648:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800064a:	b002      	add	sp, #8
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	2300      	movs	r3, #0
{
 800065a:	b530      	push	{r4, r5, lr}
  if(hadc->Instance==ADC1)
 800065c:	4a1d      	ldr	r2, [pc, #116]	; (80006d4 <HAL_ADC_MspInit+0x7c>)
 800065e:	6801      	ldr	r1, [r0, #0]
{
 8000660:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 8000662:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000664:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000668:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(hadc->Instance==ADC1)
 800066c:	d001      	beq.n	8000672 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800066e:	b009      	add	sp, #36	; 0x24
 8000670:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 8000672:	2401      	movs	r4, #1
 8000674:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800067a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800067e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000680:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000686:	619a      	str	r2, [r3, #24]
 8000688:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <HAL_ADC_MspInit+0x80>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000690:	9201      	str	r2, [sp, #4]
 8000692:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000694:	699a      	ldr	r2, [r3, #24]
 8000696:	f042 0204 	orr.w	r2, r2, #4
 800069a:	619a      	str	r2, [r3, #24]
 800069c:	699a      	ldr	r2, [r3, #24]
 800069e:	f002 0204 	and.w	r2, r2, #4
 80006a2:	9202      	str	r2, [sp, #8]
 80006a4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	f042 0208 	orr.w	r2, r2, #8
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = BAT_LVL_CTRL_Pin;
 80006b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	9303      	str	r3, [sp, #12]
 80006ba:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(BAT_LVL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80006bc:	f000 fafa 	bl	8000cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
 80006c0:	2203      	movs	r2, #3
 80006c2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c4:	4805      	ldr	r0, [pc, #20]	; (80006dc <HAL_ADC_MspInit+0x84>)
 80006c6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = JOYSTICK_OX_Pin|JOYSTICK_OY_Pin;
 80006c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f000 faf2 	bl	8000cb4 <HAL_GPIO_Init>
}
 80006d0:	b009      	add	sp, #36	; 0x24
 80006d2:	bd30      	pop	{r4, r5, pc}
 80006d4:	40012400 	.word	0x40012400
 80006d8:	40010800 	.word	0x40010800
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_RTC_MspInit+0x34>)
 80006e2:	6802      	ldr	r2, [r0, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d000      	beq.n	80006ea <HAL_RTC_MspInit+0xa>
 80006e8:	4770      	bx	lr
{
 80006ea:	b500      	push	{lr}
 80006ec:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80006ee:	f000 fbf3 	bl	8000ed8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006f2:	2001      	movs	r0, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <HAL_RTC_MspInit+0x38>)
    __HAL_RCC_RTC_ENABLE();
 80006f6:	4909      	ldr	r1, [pc, #36]	; (800071c <HAL_RTC_MspInit+0x3c>)
    __HAL_RCC_BKP_CLK_ENABLE();
 80006f8:	69da      	ldr	r2, [r3, #28]
 80006fa:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80006fe:	61da      	str	r2, [r3, #28]
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 800070a:	f8c1 043c 	str.w	r0, [r1, #1084]	; 0x43c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800070e:	b003      	add	sp, #12
 8000710:	f85d fb04 	ldr.w	pc, [sp], #4
 8000714:	40002800 	.word	0x40002800
 8000718:	40021000 	.word	0x40021000
 800071c:	42420000 	.word	0x42420000

08000720 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	2300      	movs	r3, #0
{
 8000722:	b570      	push	{r4, r5, r6, lr}
  if(hspi->Instance==SPI2)
 8000724:	4a16      	ldr	r2, [pc, #88]	; (8000780 <HAL_SPI_MspInit+0x60>)
 8000726:	6801      	ldr	r1, [r0, #0]
{
 8000728:	b086      	sub	sp, #24
  if(hspi->Instance==SPI2)
 800072a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000730:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hspi->Instance==SPI2)
 8000734:	d001      	beq.n	800073a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000736:	b006      	add	sp, #24
 8000738:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 800073a:	f44f 4430 	mov.w	r4, #45056	; 0xb000
 800073e:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2603      	movs	r6, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000742:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000746:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800074a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800074e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000752:	61da      	str	r2, [r3, #28]
 8000754:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000756:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000758:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800075c:	9200      	str	r2, [sp, #0]
 800075e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	699a      	ldr	r2, [r3, #24]
 8000762:	f042 0208 	orr.w	r2, r2, #8
 8000766:	619a      	str	r2, [r3, #24]
 8000768:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = DISP_SPI_CS_Pin|DISP_SPI_SCK_Pin|GPIO_PIN_15;
 800076a:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000778:	f000 fa9c 	bl	8000cb4 <HAL_GPIO_Init>
}
 800077c:	b006      	add	sp, #24
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	40003800 	.word	0x40003800
 8000784:	40010c00 	.word	0x40010c00

08000788 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_TIM_PWM_MspInit+0x28>)
 800078a:	6802      	ldr	r2, [r0, #0]
 800078c:	429a      	cmp	r2, r3
 800078e:	d000      	beq.n	8000792 <HAL_TIM_PWM_MspInit+0xa>
 8000790:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000792:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000796:	699a      	ldr	r2, [r3, #24]
{
 8000798:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 800079a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800079e:	619a      	str	r2, [r3, #24]
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007a6:	9301      	str	r3, [sp, #4]
 80007a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007aa:	b002      	add	sp, #8
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40012c00 	.word	0x40012c00

080007b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	2300      	movs	r3, #0
{
 80007b6:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM1)
 80007b8:	4a12      	ldr	r2, [pc, #72]	; (8000804 <HAL_TIM_MspPostInit+0x50>)
 80007ba:	6801      	ldr	r1, [r0, #0]
{
 80007bc:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 80007be:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80007c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 80007c8:	d001      	beq.n	80007ce <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80007ca:	b006      	add	sp, #24
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 80007ce:	f44f 7480 	mov.w	r4, #256	; 0x100
 80007d2:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2602      	movs	r6, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80007da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80007de:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <HAL_TIM_MspPostInit+0x54>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	f042 0204 	orr.w	r2, r2, #4
 80007e6:	619a      	str	r2, [r3, #24]
 80007e8:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80007ea:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = DISP_BRIGHT_PWM_Pin;
 80007f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(DISP_BRIGHT_PWM_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f000 fa5b 	bl	8000cb4 <HAL_GPIO_Init>
}
 80007fe:	b006      	add	sp, #24
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	bf00      	nop
 8000804:	40012c00 	.word	0x40012c00
 8000808:	40010800 	.word	0x40010800

0800080c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800080c:	e7fe      	b.n	800080c <NMI_Handler>
 800080e:	bf00      	nop

08000810 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <HardFault_Handler>
 8000812:	bf00      	nop

08000814 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler>
 8000816:	bf00      	nop

08000818 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <BusFault_Handler>
 800081a:	bf00      	nop

0800081c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081c:	e7fe      	b.n	800081c <UsageFault_Handler>
 800081e:	bf00      	nop

08000820 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop

08000824 <DebugMon_Handler>:
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <PendSV_Handler>:
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop

0800082c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800082c:	f000 b85e 	b.w	80008ec <HAL_IncTick>

08000830 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <Reset_Handler>:
 8000834:	480c      	ldr	r0, [pc, #48]	; (8000868 <LoopFillZerobss+0x12>)
 8000836:	490d      	ldr	r1, [pc, #52]	; (800086c <LoopFillZerobss+0x16>)
 8000838:	4a0d      	ldr	r2, [pc, #52]	; (8000870 <LoopFillZerobss+0x1a>)
 800083a:	2300      	movs	r3, #0
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:
 800083e:	58d4      	ldr	r4, [r2, r3]
 8000840:	50c4      	str	r4, [r0, r3]
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:
 8000844:	18c4      	adds	r4, r0, r3
 8000846:	428c      	cmp	r4, r1
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <LoopFillZerobss+0x1e>)
 800084c:	4c0a      	ldr	r4, [pc, #40]	; (8000878 <LoopFillZerobss+0x22>)
 800084e:	2300      	movs	r3, #0
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:
 8000856:	42a2      	cmp	r2, r4
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>
 800085a:	f7ff ffe9 	bl	8000830 <SystemInit>
 800085e:	f001 fd43 	bl	80022e8 <__libc_init_array>
 8000862:	f7ff fd5b 	bl	800031c <main>
 8000866:	4770      	bx	lr
 8000868:	20000000 	.word	0x20000000
 800086c:	2000000c 	.word	0x2000000c
 8000870:	0800239c 	.word	0x0800239c
 8000874:	2000000c 	.word	0x2000000c
 8000878:	20000514 	.word	0x20000514

0800087c <ADC1_2_IRQHandler>:
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <HAL_InitTick+0x3c>)
{
 8000888:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088a:	7811      	ldrb	r1, [r2, #0]
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <HAL_InitTick+0x40>)
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	6812      	ldr	r2, [r2, #0]
 8000894:	fbb2 f0f3 	udiv	r0, r2, r3
 8000898:	f000 f9f4 	bl	8000c84 <HAL_SYSTICK_Config>
 800089c:	b908      	cbnz	r0, 80008a2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	2d0f      	cmp	r5, #15
 80008a0:	d901      	bls.n	80008a6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80008a2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80008a4:	bd38      	pop	{r3, r4, r5, pc}
 80008a6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	4602      	mov	r2, r0
 80008aa:	4629      	mov	r1, r5
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f9aa 	bl	8000c08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_InitTick+0x44>)
 80008b6:	4620      	mov	r0, r4
 80008b8:	601d      	str	r5, [r3, #0]
}
 80008ba:	bd38      	pop	{r3, r4, r5, pc}
 80008bc:	20000004 	.word	0x20000004
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008

080008c8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c8:	4a07      	ldr	r2, [pc, #28]	; (80008e8 <HAL_Init+0x20>)
{
 80008ca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008cc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ce:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	f043 0310 	orr.w	r3, r3, #16
 80008d4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d6:	f000 f985 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008da:	200f      	movs	r0, #15
 80008dc:	f7ff ffd0 	bl	8000880 <HAL_InitTick>
  HAL_MspInit();
 80008e0:	f7ff fe98 	bl	8000614 <HAL_MspInit>
}
 80008e4:	2000      	movs	r0, #0
 80008e6:	bd08      	pop	{r3, pc}
 80008e8:	40022000 	.word	0x40022000

080008ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <HAL_IncTick+0x10>)
 80008ee:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_IncTick+0x14>)
 80008f0:	6811      	ldr	r1, [r2, #0]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	440b      	add	r3, r1
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	20000510 	.word	0x20000510
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000904:	4b01      	ldr	r3, [pc, #4]	; (800090c <HAL_GetTick+0x8>)
 8000906:	6818      	ldr	r0, [r3, #0]
}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	20000510 	.word	0x20000510

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b538      	push	{r3, r4, r5, lr}
 8000912:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000914:	f7ff fff6 	bl	8000904 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000918:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800091a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800091c:	d002      	beq.n	8000924 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <HAL_Delay+0x20>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	1b40      	subs	r0, r0, r5
 800092a:	42a0      	cmp	r0, r4
 800092c:	d3fa      	bcc.n	8000924 <HAL_Delay+0x14>
  {
  }
}
 800092e:	bd38      	pop	{r3, r4, r5, pc}
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000934:	2800      	cmp	r0, #0
 8000936:	f000 8089 	beq.w	8000a4c <HAL_ADC_Init+0x118>
{
 800093a:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800093c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800093e:	4604      	mov	r4, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d06b      	beq.n	8000a1c <HAL_ADC_Init+0xe8>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000944:	6823      	ldr	r3, [r4, #0]
 8000946:	689a      	ldr	r2, [r3, #8]
 8000948:	07d1      	lsls	r1, r2, #31
 800094a:	d440      	bmi.n	80009ce <HAL_ADC_Init+0x9a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800094c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800094e:	06d2      	lsls	r2, r2, #27
 8000950:	d45e      	bmi.n	8000a10 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8000952:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000954:	6861      	ldr	r1, [r4, #4]
 8000956:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000958:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800095c:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 800095e:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000962:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8000964:	f042 0202 	orr.w	r2, r2, #2
 8000968:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800096a:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800096e:	68a1      	ldr	r1, [r4, #8]
 8000970:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000974:	d058      	beq.n	8000a28 <HAL_ADC_Init+0xf4>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000976:	7d20      	ldrb	r0, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000978:	2901      	cmp	r1, #1
 800097a:	bf0c      	ite	eq
 800097c:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8000980:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000984:	2801      	cmp	r0, #1
 8000986:	d06d      	beq.n	8000a64 <HAL_ADC_Init+0x130>
      MODIFY_REG(hadc->Instance->CR1,
 8000988:	6858      	ldr	r0, [r3, #4]
 800098a:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800098e:	ea40 000c 	orr.w	r0, r0, ip
 8000992:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000994:	689d      	ldr	r5, [r3, #8]
 8000996:	4844      	ldr	r0, [pc, #272]	; (8000aa8 <HAL_ADC_Init+0x174>)
 8000998:	4028      	ands	r0, r5
 800099a:	4310      	orrs	r0, r2
 800099c:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800099e:	2901      	cmp	r1, #1
 80009a0:	d050      	beq.n	8000a44 <HAL_ADC_Init+0x110>
  uint32_t tmp_sqr1 = 0U;
 80009a2:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 80009a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009a6:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80009aa:	4301      	orrs	r1, r0
 80009ac:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ae:	6899      	ldr	r1, [r3, #8]
 80009b0:	4b3e      	ldr	r3, [pc, #248]	; (8000aac <HAL_ADC_Init+0x178>)
 80009b2:	400b      	ands	r3, r1
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d04b      	beq.n	8000a50 <HAL_ADC_Init+0x11c>
      tmp_hal_status = HAL_ERROR;
 80009b8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80009ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009bc:	f023 0312 	bic.w	r3, r3, #18
 80009c0:	f043 0310 	orr.w	r3, r3, #16
 80009c4:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009c8:	4303      	orrs	r3, r0
 80009ca:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80009cc:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80009ce:	689a      	ldr	r2, [r3, #8]
 80009d0:	f022 0201 	bic.w	r2, r2, #1
 80009d4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009d6:	f7ff ff95 	bl	8000904 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009da:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80009dc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80009de:	689a      	ldr	r2, [r3, #8]
 80009e0:	07d2      	lsls	r2, r2, #31
 80009e2:	d5b3      	bpl.n	800094c <HAL_ADC_Init+0x18>
 80009e4:	e002      	b.n	80009ec <HAL_ADC_Init+0xb8>
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	07d1      	lsls	r1, r2, #31
 80009ea:	d5af      	bpl.n	800094c <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009ec:	f7ff ff8a 	bl	8000904 <HAL_GetTick>
 80009f0:	1b40      	subs	r0, r0, r5
 80009f2:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80009f4:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009f6:	d9f6      	bls.n	80009e6 <HAL_ADC_Init+0xb2>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	07d0      	lsls	r0, r2, #31
 80009fc:	d5f3      	bpl.n	80009e6 <HAL_ADC_Init+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000a12:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a14:	f043 0310 	orr.w	r3, r3, #16
 8000a18:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8000a1c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000a1e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000a22:	f7ff fe19 	bl	8000658 <HAL_ADC_MspInit>
 8000a26:	e78d      	b.n	8000944 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a28:	7d20      	ldrb	r0, [r4, #20]
 8000a2a:	2801      	cmp	r0, #1
 8000a2c:	d019      	beq.n	8000a62 <HAL_ADC_Init+0x12e>
      MODIFY_REG(hadc->Instance->CR1,
 8000a2e:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a30:	491d      	ldr	r1, [pc, #116]	; (8000aa8 <HAL_ADC_Init+0x174>)
      MODIFY_REG(hadc->Instance->CR1,
 8000a32:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8000a36:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8000a3a:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a3c:	6898      	ldr	r0, [r3, #8]
 8000a3e:	4001      	ands	r1, r0
 8000a40:	4311      	orrs	r1, r2
 8000a42:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a44:	6921      	ldr	r1, [r4, #16]
 8000a46:	3901      	subs	r1, #1
 8000a48:	0508      	lsls	r0, r1, #20
 8000a4a:	e7ab      	b.n	80009a4 <HAL_ADC_Init+0x70>
    return HAL_ERROR;
 8000a4c:	2001      	movs	r0, #1
}
 8000a4e:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8000a50:	2000      	movs	r0, #0
 8000a52:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000a54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a56:	f023 0303 	bic.w	r3, r3, #3
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000a60:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a62:	468c      	mov	ip, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a64:	b1c5      	cbz	r5, 8000a98 <HAL_ADC_Init+0x164>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000a68:	f040 0020 	orr.w	r0, r0, #32
 8000a6c:	62a0      	str	r0, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000a70:	f040 0001 	orr.w	r0, r0, #1
 8000a74:	62e0      	str	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8000a76:	6858      	ldr	r0, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a78:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000a7c:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000a86:	689d      	ldr	r5, [r3, #8]
 8000a88:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <HAL_ADC_Init+0x174>)
 8000a8a:	ea00 0005 	and.w	r0, r0, r5
 8000a8e:	ea40 0002 	orr.w	r0, r0, r2
 8000a92:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a94:	d183      	bne.n	800099e <HAL_ADC_Init+0x6a>
 8000a96:	e7d5      	b.n	8000a44 <HAL_ADC_Init+0x110>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a98:	69a0      	ldr	r0, [r4, #24]
 8000a9a:	3801      	subs	r0, #1
 8000a9c:	ea4c 3040 	orr.w	r0, ip, r0, lsl #13
 8000aa0:	f440 6c00 	orr.w	ip, r0, #2048	; 0x800
 8000aa4:	e7e7      	b.n	8000a76 <HAL_ADC_Init+0x142>
 8000aa6:	bf00      	nop
 8000aa8:	ffe1f7fd 	.word	0xffe1f7fd
 8000aac:	ff1f0efe 	.word	0xff1f0efe

08000ab0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000ab0:	2300      	movs	r3, #0
{ 
 8000ab2:	b530      	push	{r4, r5, lr}
 8000ab4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000ab6:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000ab8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d074      	beq.n	8000baa <HAL_ADC_ConfigChannel+0xfa>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000ac6:	684b      	ldr	r3, [r1, #4]
 8000ac8:	4602      	mov	r2, r0
 8000aca:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000acc:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8000ace:	d932      	bls.n	8000b36 <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8000ad0:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ad2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8000ad6:	d84e      	bhi.n	8000b76 <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ad8:	f04f 0c1f 	mov.w	ip, #31
 8000adc:	6808      	ldr	r0, [r1, #0]
 8000ade:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000ae0:	3b23      	subs	r3, #35	; 0x23
 8000ae2:	fa00 fe03 	lsl.w	lr, r0, r3
 8000ae6:	fa0c f303 	lsl.w	r3, ip, r3
 8000aea:	ea25 0303 	bic.w	r3, r5, r3
 8000aee:	ea43 030e 	orr.w	r3, r3, lr
 8000af2:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000af4:	2809      	cmp	r0, #9
 8000af6:	d930      	bls.n	8000b5a <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000af8:	f04f 0c07 	mov.w	ip, #7
 8000afc:	688d      	ldr	r5, [r1, #8]
 8000afe:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8000b02:	68e3      	ldr	r3, [r4, #12]
 8000b04:	391e      	subs	r1, #30
 8000b06:	408d      	lsls	r5, r1
 8000b08:	fa0c f101 	lsl.w	r1, ip, r1
 8000b0c:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b10:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b14:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b16:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b18:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b1a:	d844      	bhi.n	8000ba6 <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8000b1c:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_ADC_ConfigChannel+0x128>)
 8000b1e:	429c      	cmp	r4, r3
 8000b20:	d038      	beq.n	8000b94 <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 8000b22:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b24:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8000b32:	b003      	add	sp, #12
 8000b34:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b36:	f04f 0c1f 	mov.w	ip, #31
 8000b3a:	6808      	ldr	r0, [r1, #0]
 8000b3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b40:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8000b42:	3b05      	subs	r3, #5
 8000b44:	fa00 fe03 	lsl.w	lr, r0, r3
 8000b48:	fa0c f303 	lsl.w	r3, ip, r3
 8000b4c:	ea25 0303 	bic.w	r3, r5, r3
 8000b50:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b54:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b56:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b58:	d8ce      	bhi.n	8000af8 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b5a:	2507      	movs	r5, #7
 8000b5c:	6889      	ldr	r1, [r1, #8]
 8000b5e:	6923      	ldr	r3, [r4, #16]
 8000b60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000b64:	4081      	lsls	r1, r0
 8000b66:	fa05 f000 	lsl.w	r0, r5, r0
 8000b6a:	ea23 0300 	bic.w	r3, r3, r0
 8000b6e:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b70:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b72:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b74:	e7da      	b.n	8000b2c <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b76:	f04f 0c1f 	mov.w	ip, #31
 8000b7a:	6808      	ldr	r0, [r1, #0]
 8000b7c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000b7e:	3b41      	subs	r3, #65	; 0x41
 8000b80:	fa00 fe03 	lsl.w	lr, r0, r3
 8000b84:	fa0c f303 	lsl.w	r3, ip, r3
 8000b88:	ea25 0303 	bic.w	r3, r5, r3
 8000b8c:	ea43 030e 	orr.w	r3, r3, lr
 8000b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b92:	e7af      	b.n	8000af4 <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b94:	68a3      	ldr	r3, [r4, #8]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	d405      	bmi.n	8000ba6 <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b9a:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b9c:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ba2:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ba4:	d004      	beq.n	8000bb0 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	e7c0      	b.n	8000b2c <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8000baa:	2002      	movs	r0, #2
}
 8000bac:	b003      	add	sp, #12
 8000bae:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_ADC_ConfigChannel+0x12c>)
 8000bb2:	490b      	ldr	r1, [pc, #44]	; (8000be0 <HAL_ADC_ConfigChannel+0x130>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	fba1 1303 	umull	r1, r3, r1, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bc4:	9b01      	ldr	r3, [sp, #4]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0ed      	beq.n	8000ba6 <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8000bca:	9b01      	ldr	r3, [sp, #4]
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bd0:	9b01      	ldr	r3, [sp, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f9      	bne.n	8000bca <HAL_ADC_ConfigChannel+0x11a>
 8000bd6:	e7e6      	b.n	8000ba6 <HAL_ADC_ConfigChannel+0xf6>
 8000bd8:	40012400 	.word	0x40012400
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	431bde83 	.word	0x431bde83

08000be4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be4:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bea:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000c00:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c0a:	b500      	push	{lr}
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c12:	f1c3 0e07 	rsb	lr, r3, #7
 8000c16:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1e:	bf28      	it	cs
 8000c20:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c24:	f1bc 0f06 	cmp.w	ip, #6
 8000c28:	d91b      	bls.n	8000c62 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2a:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c30:	fa0c fc03 	lsl.w	ip, ip, r3
 8000c34:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 3cff 	mov.w	ip, #4294967295
 8000c3c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000c40:	ea21 010c 	bic.w	r1, r1, ip
 8000c44:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000c46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000c4c:	db0c      	blt.n	8000c68 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	0109      	lsls	r1, r1, #4
 8000c50:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c54:	b2c9      	uxtb	r1, r1
 8000c56:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c5a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000c5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c62:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c64:	4613      	mov	r3, r2
 8000c66:	e7e7      	b.n	8000c38 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_NVIC_SetPriority+0x78>)
 8000c6a:	f000 000f 	and.w	r0, r0, #15
 8000c6e:	0109      	lsls	r1, r1, #4
 8000c70:	b2c9      	uxtb	r1, r1
 8000c72:	4403      	add	r3, r0
 8000c74:	7619      	strb	r1, [r3, #24]
 8000c76:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c7a:	bf00      	nop
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	e000ecfc 	.word	0xe000ecfc

08000c84 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	3801      	subs	r0, #1
 8000c86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c8a:	d20f      	bcs.n	8000cac <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c96:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c98:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	4c05      	ldr	r4, [pc, #20]	; (8000cb0 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8000ca6:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca8:	6119      	str	r1, [r3, #16]
 8000caa:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2001      	movs	r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	680e      	ldr	r6, [r1, #0]
{
 8000cba:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	f000 80b5 	beq.w	8000e2c <HAL_GPIO_Init+0x178>
 8000cc2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc4:	4f7a      	ldr	r7, [pc, #488]	; (8000eb0 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8000cc6:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000cc8:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cca:	4d7a      	ldr	r5, [pc, #488]	; (8000eb4 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8000ccc:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8000eb8 <HAL_GPIO_Init+0x204>
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8000cd2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd4:	fa36 f403 	lsrs.w	r4, r6, r3
 8000cd8:	f102 0204 	add.w	r2, r2, #4
 8000cdc:	f000 80a6 	beq.w	8000e2c <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8000ce0:	2401      	movs	r4, #1
 8000ce2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000ce4:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce8:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8000cec:	d1f1      	bne.n	8000cd2 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000cee:	684e      	ldr	r6, [r1, #4]
 8000cf0:	2e12      	cmp	r6, #18
 8000cf2:	f200 809e 	bhi.w	8000e32 <HAL_GPIO_Init+0x17e>
 8000cf6:	2e12      	cmp	r6, #18
 8000cf8:	d81a      	bhi.n	8000d30 <HAL_GPIO_Init+0x7c>
 8000cfa:	e8df f006 	tbb	[pc, r6]
 8000cfe:	b9a7      	.short	0xb9a7
 8000d00:	1919ceb5 	.word	0x1919ceb5
 8000d04:	19191919 	.word	0x19191919
 8000d08:	19191919 	.word	0x19191919
 8000d0c:	b1191919 	.word	0xb1191919
 8000d10:	bc          	.byte	0xbc
 8000d11:	00          	.byte	0x00
 8000d12:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8000ebc <HAL_GPIO_Init+0x208>
 8000d16:	4576      	cmp	r6, lr
 8000d18:	f000 8098 	beq.w	8000e4c <HAL_GPIO_Init+0x198>
 8000d1c:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8000d20:	4576      	cmp	r6, lr
 8000d22:	f000 8093 	beq.w	8000e4c <HAL_GPIO_Init+0x198>
 8000d26:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8000d2a:	4576      	cmp	r6, lr
 8000d2c:	f000 808e 	beq.w	8000e4c <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d30:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8000d34:	bf9c      	itt	ls
 8000d36:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d38:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d3a:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d3e:	bf84      	itt	hi
 8000d40:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d44:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d48:	f8de 4000 	ldr.w	r4, [lr]
 8000d4c:	fa0a f90b 	lsl.w	r9, sl, fp
 8000d50:	fa06 fb0b 	lsl.w	fp, r6, fp
 8000d54:	ea24 040b 	bic.w	r4, r4, fp
 8000d58:	ea44 0409 	orr.w	r4, r4, r9
 8000d5c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d60:	684c      	ldr	r4, [r1, #4]
 8000d62:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000d66:	d079      	beq.n	8000e5c <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d68:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d6c:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d70:	f04e 0e01 	orr.w	lr, lr, #1
 8000d74:	f8c7 e018 	str.w	lr, [r7, #24]
 8000d78:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d7c:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d80:	f00e 0e01 	and.w	lr, lr, #1
 8000d84:	f8cd e004 	str.w	lr, [sp, #4]
 8000d88:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000d8c:	f023 0e03 	bic.w	lr, r3, #3
 8000d90:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8000d94:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000d98:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d9c:	fa06 f609 	lsl.w	r6, r6, r9
 8000da0:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000da4:	f8df b118 	ldr.w	fp, [pc, #280]	; 8000ec0 <HAL_GPIO_Init+0x20c>
 8000da8:	4558      	cmp	r0, fp
 8000daa:	d013      	beq.n	8000dd4 <HAL_GPIO_Init+0x120>
 8000dac:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8000db0:	4558      	cmp	r0, fp
 8000db2:	d06b      	beq.n	8000e8c <HAL_GPIO_Init+0x1d8>
 8000db4:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000ec4 <HAL_GPIO_Init+0x210>
 8000db8:	4558      	cmp	r0, fp
 8000dba:	d060      	beq.n	8000e7e <HAL_GPIO_Init+0x1ca>
 8000dbc:	f8df b108 	ldr.w	fp, [pc, #264]	; 8000ec8 <HAL_GPIO_Init+0x214>
 8000dc0:	4558      	cmp	r0, fp
 8000dc2:	bf0c      	ite	eq
 8000dc4:	f04f 0b03 	moveq.w	fp, #3
 8000dc8:	f04f 0b04 	movne.w	fp, #4
 8000dcc:	fa0b f909 	lsl.w	r9, fp, r9
 8000dd0:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000dd4:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd8:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000dde:	bf14      	ite	ne
 8000de0:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de4:	ea26 060c 	biceq.w	r6, r6, ip
 8000de8:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000dea:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dec:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000df0:	bf14      	ite	ne
 8000df2:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000df6:	ea26 060c 	biceq.w	r6, r6, ip
 8000dfa:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dfc:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dfe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e02:	bf14      	ite	ne
 8000e04:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e08:	ea26 060c 	biceq.w	r6, r6, ip
 8000e0c:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e0e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e12:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e14:	d01f      	beq.n	8000e56 <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e16:	ea44 040c 	orr.w	r4, r4, ip
 8000e1a:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1c:	680e      	ldr	r6, [r1, #0]
	position++;
 8000e1e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e20:	fa36 f403 	lsrs.w	r4, r6, r3
 8000e24:	f102 0204 	add.w	r2, r2, #4
 8000e28:	f47f af5a 	bne.w	8000ce0 <HAL_GPIO_Init+0x2c>
  }
}
 8000e2c:	b003      	add	sp, #12
 8000e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000e32:	4546      	cmp	r6, r8
 8000e34:	d00a      	beq.n	8000e4c <HAL_GPIO_Init+0x198>
 8000e36:	f67f af6c 	bls.w	8000d12 <HAL_GPIO_Init+0x5e>
 8000e3a:	f8df e090 	ldr.w	lr, [pc, #144]	; 8000ecc <HAL_GPIO_Init+0x218>
 8000e3e:	4576      	cmp	r6, lr
 8000e40:	d004      	beq.n	8000e4c <HAL_GPIO_Init+0x198>
 8000e42:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8000e46:	4576      	cmp	r6, lr
 8000e48:	f47f af72 	bne.w	8000d30 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4c:	688e      	ldr	r6, [r1, #8]
 8000e4e:	bb3e      	cbnz	r6, 8000ea0 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e50:	f04f 0a04 	mov.w	sl, #4
 8000e54:	e76c      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e56:	ea24 040c 	bic.w	r4, r4, ip
 8000e5a:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5c:	680e      	ldr	r6, [r1, #0]
 8000e5e:	e738      	b.n	8000cd2 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e60:	68cc      	ldr	r4, [r1, #12]
 8000e62:	f104 0a04 	add.w	sl, r4, #4
          break;
 8000e66:	e763      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e68:	68cc      	ldr	r4, [r1, #12]
 8000e6a:	f104 0a08 	add.w	sl, r4, #8
          break;
 8000e6e:	e75f      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e70:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8000e74:	e75c      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e76:	68cc      	ldr	r4, [r1, #12]
 8000e78:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8000e7c:	e758      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7e:	f04f 0b02 	mov.w	fp, #2
 8000e82:	fa0b f909 	lsl.w	r9, fp, r9
 8000e86:	ea46 0609 	orr.w	r6, r6, r9
 8000e8a:	e7a3      	b.n	8000dd4 <HAL_GPIO_Init+0x120>
 8000e8c:	f04f 0b01 	mov.w	fp, #1
 8000e90:	fa0b f909 	lsl.w	r9, fp, r9
 8000e94:	ea46 0609 	orr.w	r6, r6, r9
 8000e98:	e79c      	b.n	8000dd4 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8000e9a:	f04f 0a00 	mov.w	sl, #0
 8000e9e:	e747      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ea0:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea2:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8000ea6:	bf0c      	ite	eq
 8000ea8:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8000eaa:	6144      	strne	r4, [r0, #20]
 8000eac:	e740      	b.n	8000d30 <HAL_GPIO_Init+0x7c>
 8000eae:	bf00      	nop
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010400 	.word	0x40010400
 8000eb8:	10220000 	.word	0x10220000
 8000ebc:	10120000 	.word	0x10120000
 8000ec0:	40010800 	.word	0x40010800
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40011400 	.word	0x40011400
 8000ecc:	10310000 	.word	0x10310000

08000ed0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed0:	b902      	cbnz	r2, 8000ed4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ed2:	0409      	lsls	r1, r1, #16
 8000ed4:	6101      	str	r1, [r0, #16]
  }
}
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4b01      	ldr	r3, [pc, #4]	; (8000ee0 <HAL_PWR_EnableBkUpAccess+0x8>)
 8000edc:	621a      	str	r2, [r3, #32]
}
 8000ede:	4770      	bx	lr
 8000ee0:	420e0000 	.word	0x420e0000

08000ee4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	f000 81b6 	beq.w	8001256 <HAL_RCC_OscConfig+0x372>
{
 8000eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	6803      	ldr	r3, [r0, #0]
 8000ef0:	4604      	mov	r4, r0
 8000ef2:	07dd      	lsls	r5, r3, #31
{
 8000ef4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	d535      	bpl.n	8000f64 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef8:	499a      	ldr	r1, [pc, #616]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8000efa:	684a      	ldr	r2, [r1, #4]
 8000efc:	f002 020c 	and.w	r2, r2, #12
 8000f00:	2a04      	cmp	r2, #4
 8000f02:	f000 80ef 	beq.w	80010e4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f06:	684a      	ldr	r2, [r1, #4]
 8000f08:	f002 020c 	and.w	r2, r2, #12
 8000f0c:	2a08      	cmp	r2, #8
 8000f0e:	f000 80e5 	beq.w	80010dc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f12:	6863      	ldr	r3, [r4, #4]
 8000f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f18:	d010      	beq.n	8000f3c <HAL_RCC_OscConfig+0x58>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 810c 	beq.w	8001138 <HAL_RCC_OscConfig+0x254>
 8000f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f24:	f000 8182 	beq.w	800122c <HAL_RCC_OscConfig+0x348>
 8000f28:	4b8e      	ldr	r3, [pc, #568]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e004      	b.n	8000f46 <HAL_RCC_OscConfig+0x62>
 8000f3c:	4a89      	ldr	r2, [pc, #548]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fcdd 	bl	8000904 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4e86      	ldr	r6, [pc, #536]	; (8001164 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8000f4c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	e005      	b.n	8000f5c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f50:	f7ff fcd8 	bl	8000904 <HAL_GetTick>
 8000f54:	1b40      	subs	r0, r0, r5
 8000f56:	2864      	cmp	r0, #100	; 0x64
 8000f58:	f200 80ea 	bhi.w	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	6833      	ldr	r3, [r6, #0]
 8000f5e:	039a      	lsls	r2, r3, #14
 8000f60:	d5f6      	bpl.n	8000f50 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	079f      	lsls	r7, r3, #30
 8000f66:	d528      	bpl.n	8000fba <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f68:	4a7e      	ldr	r2, [pc, #504]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8000f6a:	6851      	ldr	r1, [r2, #4]
 8000f6c:	f011 0f0c 	tst.w	r1, #12
 8000f70:	f000 808d 	beq.w	800108e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f74:	6851      	ldr	r1, [r2, #4]
 8000f76:	f001 010c 	and.w	r1, r1, #12
 8000f7a:	2908      	cmp	r1, #8
 8000f7c:	f000 8083 	beq.w	8001086 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f80:	6923      	ldr	r3, [r4, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 8118 	beq.w	80011b8 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4b77      	ldr	r3, [pc, #476]	; (8001168 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	4e75      	ldr	r6, [pc, #468]	; (8001164 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 8000f8e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f90:	f7ff fcb8 	bl	8000904 <HAL_GetTick>
 8000f94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f96:	e005      	b.n	8000fa4 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f98:	f7ff fcb4 	bl	8000904 <HAL_GetTick>
 8000f9c:	1b40      	subs	r0, r0, r5
 8000f9e:	2802      	cmp	r0, #2
 8000fa0:	f200 80c6 	bhi.w	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	6833      	ldr	r3, [r6, #0]
 8000fa6:	0798      	lsls	r0, r3, #30
 8000fa8:	d5f6      	bpl.n	8000f98 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	6833      	ldr	r3, [r6, #0]
 8000fac:	6962      	ldr	r2, [r4, #20]
 8000fae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000fb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fb6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb8:	6823      	ldr	r3, [r4, #0]
 8000fba:	071a      	lsls	r2, r3, #28
 8000fbc:	d41f      	bmi.n	8000ffe <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fbe:	075d      	lsls	r5, r3, #29
 8000fc0:	d542      	bpl.n	8001048 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fc2:	4b68      	ldr	r3, [pc, #416]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8000fc4:	69da      	ldr	r2, [r3, #28]
 8000fc6:	00d0      	lsls	r0, r2, #3
 8000fc8:	d57d      	bpl.n	80010c6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8000fca:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fcc:	4e67      	ldr	r6, [pc, #412]	; (800116c <HAL_RCC_OscConfig+0x288>)
 8000fce:	6833      	ldr	r3, [r6, #0]
 8000fd0:	05d9      	lsls	r1, r3, #23
 8000fd2:	f140 809d 	bpl.w	8001110 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd6:	68e3      	ldr	r3, [r4, #12]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	f000 80fe 	beq.w	80011da <HAL_RCC_OscConfig+0x2f6>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 80ca 	beq.w	8001178 <HAL_RCC_OscConfig+0x294>
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	4b5f      	ldr	r3, [pc, #380]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	f000 812c 	beq.w	8001246 <HAL_RCC_OscConfig+0x362>
 8000fee:	f022 0201 	bic.w	r2, r2, #1
 8000ff2:	621a      	str	r2, [r3, #32]
 8000ff4:	6a1a      	ldr	r2, [r3, #32]
 8000ff6:	f022 0204 	bic.w	r2, r2, #4
 8000ffa:	621a      	str	r2, [r3, #32]
 8000ffc:	e0f2      	b.n	80011e4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ffe:	69a3      	ldr	r3, [r4, #24]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d04f      	beq.n	80010a4 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 8001004:	2201      	movs	r2, #1
 8001006:	4b58      	ldr	r3, [pc, #352]	; (8001168 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001008:	4e56      	ldr	r6, [pc, #344]	; (8001164 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 800100a:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800100e:	f7ff fc79 	bl	8000904 <HAL_GetTick>
 8001012:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001014:	e005      	b.n	8001022 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001016:	f7ff fc75 	bl	8000904 <HAL_GetTick>
 800101a:	1b40      	subs	r0, r0, r5
 800101c:	2802      	cmp	r0, #2
 800101e:	f200 8087 	bhi.w	8001130 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001022:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001024:	079b      	lsls	r3, r3, #30
 8001026:	d5f6      	bpl.n	8001016 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001028:	4b51      	ldr	r3, [pc, #324]	; (8001170 <HAL_RCC_OscConfig+0x28c>)
 800102a:	4a52      	ldr	r2, [pc, #328]	; (8001174 <HAL_RCC_OscConfig+0x290>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	fba2 2303 	umull	r2, r3, r2, r3
 8001032:	0a5b      	lsrs	r3, r3, #9
 8001034:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001036:	bf00      	nop
  }
  while (Delay --);
 8001038:	9b01      	ldr	r3, [sp, #4]
 800103a:	1e5a      	subs	r2, r3, #1
 800103c:	9201      	str	r2, [sp, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f9      	bne.n	8001036 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	075d      	lsls	r5, r3, #29
 8001046:	d4bc      	bmi.n	8000fc2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001048:	69e0      	ldr	r0, [r4, #28]
 800104a:	b1c0      	cbz	r0, 800107e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800104c:	4d45      	ldr	r5, [pc, #276]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 800104e:	686b      	ldr	r3, [r5, #4]
 8001050:	f003 030c 	and.w	r3, r3, #12
 8001054:	2b08      	cmp	r3, #8
 8001056:	f000 80d8 	beq.w	800120a <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800105a:	2200      	movs	r2, #0
 800105c:	4b42      	ldr	r3, [pc, #264]	; (8001168 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800105e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001060:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001062:	f000 80fa 	beq.w	800125a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8001066:	f7ff fc4d 	bl	8000904 <HAL_GetTick>
 800106a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106c:	e004      	b.n	8001078 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800106e:	f7ff fc49 	bl	8000904 <HAL_GetTick>
 8001072:	1b00      	subs	r0, r0, r4
 8001074:	2802      	cmp	r0, #2
 8001076:	d85b      	bhi.n	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	019b      	lsls	r3, r3, #6
 800107c:	d4f7      	bmi.n	800106e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800107e:	2000      	movs	r0, #0
}
 8001080:	b002      	add	sp, #8
 8001082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001086:	6852      	ldr	r2, [r2, #4]
 8001088:	03d6      	lsls	r6, r2, #15
 800108a:	f53f af79 	bmi.w	8000f80 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4a35      	ldr	r2, [pc, #212]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	0795      	lsls	r5, r2, #30
 8001094:	d530      	bpl.n	80010f8 <HAL_RCC_OscConfig+0x214>
 8001096:	6922      	ldr	r2, [r4, #16]
 8001098:	2a01      	cmp	r2, #1
 800109a:	d02d      	beq.n	80010f8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800109c:	2001      	movs	r0, #1
}
 800109e:	b002      	add	sp, #8
 80010a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80010a4:	4a30      	ldr	r2, [pc, #192]	; (8001168 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a6:	4e2f      	ldr	r6, [pc, #188]	; (8001164 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 80010a8:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80010ac:	f7ff fc2a 	bl	8000904 <HAL_GetTick>
 80010b0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b2:	e004      	b.n	80010be <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fc26 	bl	8000904 <HAL_GetTick>
 80010b8:	1b40      	subs	r0, r0, r5
 80010ba:	2802      	cmp	r0, #2
 80010bc:	d838      	bhi.n	8001130 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80010c0:	079f      	lsls	r7, r3, #30
 80010c2:	d4f7      	bmi.n	80010b4 <HAL_RCC_OscConfig+0x1d0>
 80010c4:	e7bd      	b.n	8001042 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80010c8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ce:	61da      	str	r2, [r3, #28]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80010da:	e777      	b.n	8000fcc <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010dc:	684a      	ldr	r2, [r1, #4]
 80010de:	03d0      	lsls	r0, r2, #15
 80010e0:	f57f af17 	bpl.w	8000f12 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e4:	4a1f      	ldr	r2, [pc, #124]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 80010e6:	6812      	ldr	r2, [r2, #0]
 80010e8:	0391      	lsls	r1, r2, #14
 80010ea:	f57f af3b 	bpl.w	8000f64 <HAL_RCC_OscConfig+0x80>
 80010ee:	6862      	ldr	r2, [r4, #4]
 80010f0:	2a00      	cmp	r2, #0
 80010f2:	f47f af37 	bne.w	8000f64 <HAL_RCC_OscConfig+0x80>
 80010f6:	e7d1      	b.n	800109c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f8:	491a      	ldr	r1, [pc, #104]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 80010fa:	6960      	ldr	r0, [r4, #20]
 80010fc:	680a      	ldr	r2, [r1, #0]
 80010fe:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001102:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001106:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001108:	071a      	lsls	r2, r3, #28
 800110a:	f57f af58 	bpl.w	8000fbe <HAL_RCC_OscConfig+0xda>
 800110e:	e776      	b.n	8000ffe <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001110:	6833      	ldr	r3, [r6, #0]
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001118:	f7ff fbf4 	bl	8000904 <HAL_GetTick>
 800111c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800111e:	6833      	ldr	r3, [r6, #0]
 8001120:	05da      	lsls	r2, r3, #23
 8001122:	f53f af58 	bmi.w	8000fd6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001126:	f7ff fbed 	bl	8000904 <HAL_GetTick>
 800112a:	1bc0      	subs	r0, r0, r7
 800112c:	2864      	cmp	r0, #100	; 0x64
 800112e:	d9f6      	bls.n	800111e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8001130:	2003      	movs	r0, #3
}
 8001132:	b002      	add	sp, #8
 8001134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001138:	4d0a      	ldr	r5, [pc, #40]	; (8001164 <HAL_RCC_OscConfig+0x280>)
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001140:	602b      	str	r3, [r5, #0]
 8001142:	682b      	ldr	r3, [r5, #0]
 8001144:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001148:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800114a:	f7ff fbdb 	bl	8000904 <HAL_GetTick>
 800114e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001150:	e004      	b.n	800115c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001152:	f7ff fbd7 	bl	8000904 <HAL_GetTick>
 8001156:	1b80      	subs	r0, r0, r6
 8001158:	2864      	cmp	r0, #100	; 0x64
 800115a:	d8e9      	bhi.n	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115c:	682b      	ldr	r3, [r5, #0]
 800115e:	039b      	lsls	r3, r3, #14
 8001160:	d4f7      	bmi.n	8001152 <HAL_RCC_OscConfig+0x26e>
 8001162:	e6fe      	b.n	8000f62 <HAL_RCC_OscConfig+0x7e>
 8001164:	40021000 	.word	0x40021000
 8001168:	42420000 	.word	0x42420000
 800116c:	40007000 	.word	0x40007000
 8001170:	20000000 	.word	0x20000000
 8001174:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	4e50      	ldr	r6, [pc, #320]	; (80012bc <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800117a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800117e:	6a33      	ldr	r3, [r6, #32]
 8001180:	f023 0301 	bic.w	r3, r3, #1
 8001184:	6233      	str	r3, [r6, #32]
 8001186:	6a33      	ldr	r3, [r6, #32]
 8001188:	f023 0304 	bic.w	r3, r3, #4
 800118c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800118e:	f7ff fbb9 	bl	8000904 <HAL_GetTick>
 8001192:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001194:	e004      	b.n	80011a0 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001196:	f7ff fbb5 	bl	8000904 <HAL_GetTick>
 800119a:	1bc0      	subs	r0, r0, r7
 800119c:	4540      	cmp	r0, r8
 800119e:	d8c7      	bhi.n	8001130 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a0:	6a33      	ldr	r3, [r6, #32]
 80011a2:	0798      	lsls	r0, r3, #30
 80011a4:	d4f7      	bmi.n	8001196 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 80011a6:	2d00      	cmp	r5, #0
 80011a8:	f43f af4e 	beq.w	8001048 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ac:	4a43      	ldr	r2, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x3d8>)
 80011ae:	69d3      	ldr	r3, [r2, #28]
 80011b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	e747      	b.n	8001048 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80011b8:	4a41      	ldr	r2, [pc, #260]	; (80012c0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ba:	4e40      	ldr	r6, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80011bc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011be:	f7ff fba1 	bl	8000904 <HAL_GetTick>
 80011c2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c4:	e004      	b.n	80011d0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fb9d 	bl	8000904 <HAL_GetTick>
 80011ca:	1b40      	subs	r0, r0, r5
 80011cc:	2802      	cmp	r0, #2
 80011ce:	d8af      	bhi.n	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d0:	6833      	ldr	r3, [r6, #0]
 80011d2:	0799      	lsls	r1, r3, #30
 80011d4:	d4f7      	bmi.n	80011c6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	e6ef      	b.n	8000fba <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011da:	4a38      	ldr	r2, [pc, #224]	; (80012bc <HAL_RCC_OscConfig+0x3d8>)
 80011dc:	6a13      	ldr	r3, [r2, #32]
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80011e4:	f7ff fb8e 	bl	8000904 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80011ec:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ee:	4f33      	ldr	r7, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x3d8>)
 80011f0:	e004      	b.n	80011fc <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011f2:	f7ff fb87 	bl	8000904 <HAL_GetTick>
 80011f6:	1b80      	subs	r0, r0, r6
 80011f8:	4540      	cmp	r0, r8
 80011fa:	d899      	bhi.n	8001130 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	079b      	lsls	r3, r3, #30
 8001200:	d5f7      	bpl.n	80011f2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 8001202:	2d00      	cmp	r5, #0
 8001204:	f43f af20 	beq.w	8001048 <HAL_RCC_OscConfig+0x164>
 8001208:	e7d0      	b.n	80011ac <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800120a:	2801      	cmp	r0, #1
 800120c:	f43f af38 	beq.w	8001080 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8001210:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001212:	6a22      	ldr	r2, [r4, #32]
 8001214:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001218:	4291      	cmp	r1, r2
 800121a:	f47f af3f 	bne.w	800109c <HAL_RCC_OscConfig+0x1b8>
 800121e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001220:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8001224:	1a18      	subs	r0, r3, r0
 8001226:	bf18      	it	ne
 8001228:	2001      	movne	r0, #1
 800122a:	e729      	b.n	8001080 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001230:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e67f      	b.n	8000f46 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001246:	f042 0204 	orr.w	r2, r2, #4
 800124a:	621a      	str	r2, [r3, #32]
 800124c:	6a1a      	ldr	r2, [r3, #32]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	621a      	str	r2, [r3, #32]
 8001254:	e7c6      	b.n	80011e4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8001256:	2001      	movs	r0, #1
}
 8001258:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800125a:	f7ff fb53 	bl	8000904 <HAL_GetTick>
 800125e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001260:	e005      	b.n	800126e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001262:	f7ff fb4f 	bl	8000904 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	2802      	cmp	r0, #2
 800126a:	f63f af61 	bhi.w	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800126e:	682b      	ldr	r3, [r5, #0]
 8001270:	0199      	lsls	r1, r3, #6
 8001272:	d4f6      	bmi.n	8001262 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001274:	6a23      	ldr	r3, [r4, #32]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127a:	d105      	bne.n	8001288 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800127c:	686a      	ldr	r2, [r5, #4]
 800127e:	68a1      	ldr	r1, [r4, #8]
 8001280:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001284:	430a      	orrs	r2, r1
 8001286:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001288:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800128a:	4d0c      	ldr	r5, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x3d8>)
 800128c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800128e:	686a      	ldr	r2, [r5, #4]
 8001290:	430b      	orrs	r3, r1
 8001292:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001296:	490a      	ldr	r1, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001298:	4313      	orrs	r3, r2
 800129a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800129c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800129e:	f7ff fb31 	bl	8000904 <HAL_GetTick>
 80012a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a4:	e005      	b.n	80012b2 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fb2d 	bl	8000904 <HAL_GetTick>
 80012aa:	1b00      	subs	r0, r0, r4
 80012ac:	2802      	cmp	r0, #2
 80012ae:	f63f af3f 	bhi.w	8001130 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	019a      	lsls	r2, r3, #6
 80012b6:	d5f6      	bpl.n	80012a6 <HAL_RCC_OscConfig+0x3c2>
 80012b8:	e6e1      	b.n	800107e <HAL_RCC_OscConfig+0x19a>
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42420000 	.word	0x42420000

080012c4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80012c4:	2800      	cmp	r0, #0
 80012c6:	f000 80b1 	beq.w	800142c <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ca:	4a5e      	ldr	r2, [pc, #376]	; (8001444 <HAL_RCC_ClockConfig+0x180>)
{
 80012cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	4604      	mov	r4, r0
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	428b      	cmp	r3, r1
 80012da:	460d      	mov	r5, r1
{
 80012dc:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012de:	d20d      	bcs.n	80012fc <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f023 0307 	bic.w	r3, r3, #7
 80012e6:	430b      	orrs	r3, r1
 80012e8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	6813      	ldr	r3, [r2, #0]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	428b      	cmp	r3, r1
 80012f2:	d003      	beq.n	80012fc <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 80012f4:	2001      	movs	r0, #1
}
 80012f6:	b006      	add	sp, #24
 80012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	079e      	lsls	r6, r3, #30
 8001300:	d514      	bpl.n	800132c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001302:	0758      	lsls	r0, r3, #29
 8001304:	d504      	bpl.n	8001310 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001306:	4950      	ldr	r1, [pc, #320]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
 8001308:	684a      	ldr	r2, [r1, #4]
 800130a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800130e:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001310:	0719      	lsls	r1, r3, #28
 8001312:	d504      	bpl.n	800131e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001314:	494c      	ldr	r1, [pc, #304]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
 8001316:	684a      	ldr	r2, [r1, #4]
 8001318:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800131c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800131e:	494a      	ldr	r1, [pc, #296]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
 8001320:	68a0      	ldr	r0, [r4, #8]
 8001322:	684a      	ldr	r2, [r1, #4]
 8001324:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001328:	4302      	orrs	r2, r0
 800132a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132c:	07da      	lsls	r2, r3, #31
 800132e:	d520      	bpl.n	8001372 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001330:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b45      	ldr	r3, [pc, #276]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001334:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001338:	d07a      	beq.n	8001430 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800133a:	2a02      	cmp	r2, #2
 800133c:	d073      	beq.n	8001426 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	079e      	lsls	r6, r3, #30
 8001340:	d5d8      	bpl.n	80012f4 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001342:	4e41      	ldr	r6, [pc, #260]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001344:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001348:	6873      	ldr	r3, [r6, #4]
 800134a:	f023 0303 	bic.w	r3, r3, #3
 800134e:	4313      	orrs	r3, r2
 8001350:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001352:	f7ff fad7 	bl	8000904 <HAL_GetTick>
 8001356:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001358:	e004      	b.n	8001364 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135a:	f7ff fad3 	bl	8000904 <HAL_GetTick>
 800135e:	1bc0      	subs	r0, r0, r7
 8001360:	4540      	cmp	r0, r8
 8001362:	d868      	bhi.n	8001436 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001364:	6873      	ldr	r3, [r6, #4]
 8001366:	6862      	ldr	r2, [r4, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001370:	d1f3      	bne.n	800135a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001372:	4a34      	ldr	r2, [pc, #208]	; (8001444 <HAL_RCC_ClockConfig+0x180>)
 8001374:	6813      	ldr	r3, [r2, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	42ab      	cmp	r3, r5
 800137c:	d909      	bls.n	8001392 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	f023 0307 	bic.w	r3, r3, #7
 8001384:	432b      	orrs	r3, r5
 8001386:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001388:	6813      	ldr	r3, [r2, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	42ab      	cmp	r3, r5
 8001390:	d1b0      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	0758      	lsls	r0, r3, #29
 8001396:	d506      	bpl.n	80013a6 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001398:	492b      	ldr	r1, [pc, #172]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
 800139a:	68e0      	ldr	r0, [r4, #12]
 800139c:	684a      	ldr	r2, [r1, #4]
 800139e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80013a2:	4302      	orrs	r2, r0
 80013a4:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a6:	0719      	lsls	r1, r3, #28
 80013a8:	d507      	bpl.n	80013ba <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013aa:	4a27      	ldr	r2, [pc, #156]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
 80013ac:	6921      	ldr	r1, [r4, #16]
 80013ae:	6853      	ldr	r3, [r2, #4]
 80013b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80013b4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013b8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013ba:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <HAL_RCC_ClockConfig+0x188>)
 80013c0:	ad06      	add	r5, sp, #24
 80013c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c4:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80013c8:	491f      	ldr	r1, [pc, #124]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80013ca:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 80013ce:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80013d0:	f002 030c 	and.w	r3, r2, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d011      	beq.n	80013fc <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_RCC_ClockConfig+0x184>)
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <HAL_RCC_ClockConfig+0x190>)
 80013de:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80013e0:	491d      	ldr	r1, [pc, #116]	; (8001458 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80013e6:	5c80      	ldrb	r0, [r0, r2]
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_RCC_ClockConfig+0x198>)
 80013ea:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80013ec:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013ee:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80013f0:	f7ff fa46 	bl	8000880 <HAL_InitTick>
  return HAL_OK;
 80013f4:	2000      	movs	r0, #0
}
 80013f6:	b006      	add	sp, #24
 80013f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013fc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001400:	3318      	adds	r3, #24
 8001402:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001404:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001406:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800140a:	d516      	bpl.n	800143a <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140c:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800140e:	4910      	ldr	r1, [pc, #64]	; (8001450 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001410:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001414:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001418:	3218      	adds	r2, #24
 800141a:	446a      	add	r2, sp
 800141c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001420:	fbb3 f3f2 	udiv	r3, r3, r2
 8001424:	e7d9      	b.n	80013da <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001426:	019f      	lsls	r7, r3, #6
 8001428:	d48b      	bmi.n	8001342 <HAL_RCC_ClockConfig+0x7e>
 800142a:	e763      	b.n	80012f4 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800142c:	2001      	movs	r0, #1
}
 800142e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001430:	039b      	lsls	r3, r3, #14
 8001432:	d486      	bmi.n	8001342 <HAL_RCC_ClockConfig+0x7e>
 8001434:	e75e      	b.n	80012f4 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8001436:	2003      	movs	r0, #3
 8001438:	e75d      	b.n	80012f6 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <HAL_RCC_ClockConfig+0x19c>)
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	e7cb      	b.n	80013da <HAL_RCC_ClockConfig+0x116>
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000
 8001448:	40021000 	.word	0x40021000
 800144c:	08002380 	.word	0x08002380
 8001450:	007a1200 	.word	0x007a1200
 8001454:	08002368 	.word	0x08002368
 8001458:	20000008 	.word	0x20000008
 800145c:	20000000 	.word	0x20000000
 8001460:	003d0900 	.word	0x003d0900

08001464 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	4905      	ldr	r1, [pc, #20]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800146c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001470:	5ccb      	ldrb	r3, [r1, r3]
 8001472:	6810      	ldr	r0, [r2, #0]
}
 8001474:	40d8      	lsrs	r0, r3
 8001476:	4770      	bx	lr
 8001478:	40021000 	.word	0x40021000
 800147c:	20000000 	.word	0x20000000
 8001480:	08002378 	.word	0x08002378

08001484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001488:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800148a:	6800      	ldr	r0, [r0, #0]
{
 800148c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800148e:	07c1      	lsls	r1, r0, #31
 8001490:	d52c      	bpl.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001494:	69da      	ldr	r2, [r3, #28]
 8001496:	00d2      	lsls	r2, r2, #3
 8001498:	d53f      	bpl.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149a:	4d39      	ldr	r5, [pc, #228]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 800149c:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	05df      	lsls	r7, r3, #23
 80014a2:	d548      	bpl.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014a4:	4d35      	ldr	r5, [pc, #212]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80014a6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80014ac:	d011      	beq.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80014ae:	6861      	ldr	r1, [r4, #4]
 80014b0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d00d      	beq.n	80014d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014b8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014ba:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014bc:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80014be:	4a31      	ldr	r2, [pc, #196]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80014c4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014c8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014cc:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014ce:	07d9      	lsls	r1, r3, #31
 80014d0:	d444      	bmi.n	800155c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014d2:	6861      	ldr	r1, [r4, #4]
 80014d4:	4a29      	ldr	r2, [pc, #164]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80014d6:	6a13      	ldr	r3, [r2, #32]
 80014d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014dc:	430b      	orrs	r3, r1
 80014de:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014e0:	b11e      	cbz	r6, 80014ea <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e2:	69d3      	ldr	r3, [r2, #28]
 80014e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80014ea:	6820      	ldr	r0, [r4, #0]
 80014ec:	0783      	lsls	r3, r0, #30
 80014ee:	d506      	bpl.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80014f0:	4922      	ldr	r1, [pc, #136]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80014f2:	68a3      	ldr	r3, [r4, #8]
 80014f4:	684a      	ldr	r2, [r1, #4]
 80014f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80014fa:	431a      	orrs	r2, r3
 80014fc:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80014fe:	f010 0010 	ands.w	r0, r0, #16
 8001502:	d007      	beq.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001504:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8001508:	68e1      	ldr	r1, [r4, #12]
 800150a:	6853      	ldr	r3, [r2, #4]
 800150c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001510:	430b      	orrs	r3, r1
 8001512:	6053      	str	r3, [r2, #4]
}
 8001514:	b002      	add	sp, #8
 8001516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4d18      	ldr	r5, [pc, #96]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001522:	61da      	str	r2, [r3, #28]
 8001524:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8001526:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	05df      	lsls	r7, r3, #23
 8001534:	d4b6      	bmi.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800153e:	f7ff f9e1 	bl	8000904 <HAL_GetTick>
 8001542:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	05d8      	lsls	r0, r3, #23
 8001548:	d4ac      	bmi.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff f9db 	bl	8000904 <HAL_GetTick>
 800154e:	1bc3      	subs	r3, r0, r7
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d9f7      	bls.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8001554:	2003      	movs	r0, #3
}
 8001556:	b002      	add	sp, #8
 8001558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800155c:	f7ff f9d2 	bl	8000904 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001564:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e004      	b.n	8001572 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff f9cc 	bl	8000904 <HAL_GetTick>
 800156c:	1bc0      	subs	r0, r0, r7
 800156e:	4540      	cmp	r0, r8
 8001570:	d8f0      	bhi.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	6a2b      	ldr	r3, [r5, #32]
 8001574:	079a      	lsls	r2, r3, #30
 8001576:	d5f7      	bpl.n	8001568 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001578:	e7ab      	b.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000
 8001580:	40007000 	.word	0x40007000
 8001584:	42420000 	.word	0x42420000

08001588 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001588:	4684      	mov	ip, r0
 800158a:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800158c:	4b36      	ldr	r3, [pc, #216]	; (8001668 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 800158e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001590:	f10d 0e18 	add.w	lr, sp, #24
 8001594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001596:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 800159a:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800159c:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80015a0:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015a2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 80015a6:	d007      	beq.n	80015b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 80015a8:	2810      	cmp	r0, #16
 80015aa:	d02a      	beq.n	8001602 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80015ac:	2801      	cmp	r0, #1
 80015ae:	d010      	beq.n	80015d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 80015b0:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 80015b2:	b007      	add	sp, #28
 80015b4:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80015b8:	f7ff ff54 	bl	8001464 <HAL_RCC_GetPCLK2Freq>
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80015c4:	3301      	adds	r3, #1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80015cc:	b007      	add	sp, #28
 80015ce:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80015d2:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 80015d6:	4925      	ldr	r1, [pc, #148]	; (800166c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80015d8:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80015da:	401a      	ands	r2, r3
 80015dc:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 80015e0:	d033      	beq.n	800164a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80015e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ea:	d031      	beq.n	8001650 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80015ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015f0:	d1de      	bne.n	80015b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 80015f2:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80015f6:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 80015f8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80015fc:	bf18      	it	ne
 80015fe:	4618      	movne	r0, r3
 8001600:	e7d7      	b.n	80015b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001604:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 800160c:	d0d1      	beq.n	80015b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8001612:	3118      	adds	r1, #24
 8001614:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001616:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001618:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800161c:	d520      	bpl.n	8001660 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800161e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001620:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001622:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001626:	3318      	adds	r3, #24
 8001628:	446b      	add	r3, sp
 800162a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	025b      	lsls	r3, r3, #9
 800163c:	d4b9      	bmi.n	80015b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8001640:	0040      	lsls	r0, r0, #1
 8001642:	fba3 3000 	umull	r3, r0, r3, r0
 8001646:	0840      	lsrs	r0, r0, #1
 8001648:	e7b3      	b.n	80015b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 800164a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800164e:	e7b0      	b.n	80015b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8001650:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001654:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8001656:	f010 0002 	ands.w	r0, r0, #2
 800165a:	bf18      	it	ne
 800165c:	4618      	movne	r0, r3
 800165e:	e7a8      	b.n	80015b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8001662:	fb03 f000 	mul.w	r0, r3, r0
 8001666:	e7e6      	b.n	8001636 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8001668:	08002380 	.word	0x08002380
 800166c:	40021000 	.word	0x40021000
 8001670:	007a1200 	.word	0x007a1200
 8001674:	aaaaaaab 	.word	0xaaaaaaab
 8001678:	003d0900 	.word	0x003d0900

0800167c <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	4604      	mov	r4, r0
 8001680:	460e      	mov	r6, r1
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  tickstart = HAL_GetTick();
 8001682:	f7ff f93f 	bl	8000904 <HAL_GetTick>
 8001686:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001688:	e005      	b.n	8001696 <RTC_WriteAlarmCounter+0x1a>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800168a:	f7ff f93b 	bl	8000904 <HAL_GetTick>
 800168e:	1b40      	subs	r0, r0, r5
 8001690:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001694:	d81f      	bhi.n	80016d6 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	0692      	lsls	r2, r2, #26
 800169c:	d5f5      	bpl.n	800168a <RTC_WriteAlarmCounter+0xe>
      return HAL_TIMEOUT;
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800169e:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80016a0:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016a2:	f042 0210 	orr.w	r2, r2, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80016a6:	b2b6      	uxth	r6, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80016a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80016aa:	6219      	str	r1, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80016ac:	625e      	str	r6, [r3, #36]	; 0x24
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80016b6:	f7ff f925 	bl	8000904 <HAL_GetTick>
 80016ba:	4605      	mov	r5, r0
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80016bc:	e005      	b.n	80016ca <RTC_WriteAlarmCounter+0x4e>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80016be:	f7ff f921 	bl	8000904 <HAL_GetTick>
 80016c2:	1b40      	subs	r0, r0, r5
 80016c4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80016c8:	d805      	bhi.n	80016d6 <RTC_WriteAlarmCounter+0x5a>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	069b      	lsls	r3, r3, #26
 80016d0:	d5f5      	bpl.n	80016be <RTC_WriteAlarmCounter+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 80016d2:	2000      	movs	r0, #0
}
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_ERROR;
 80016d6:	2001      	movs	r0, #1
}
 80016d8:	bd70      	pop	{r4, r5, r6, pc}
 80016da:	bf00      	nop

080016dc <HAL_RTC_Init>:
  if (hrtc == NULL)
 80016dc:	2800      	cmp	r0, #0
 80016de:	d079      	beq.n	80017d4 <HAL_RTC_Init+0xf8>
{
 80016e0:	b538      	push	{r3, r4, r5, lr}
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80016e2:	7c43      	ldrb	r3, [r0, #17]
 80016e4:	4604      	mov	r4, r0
 80016e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d066      	beq.n	80017bc <HAL_RTC_Init+0xe0>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016ee:	2302      	movs	r3, #2
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80016f0:	6822      	ldr	r2, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80016f2:	7463      	strb	r3, [r4, #17]
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80016f4:	6853      	ldr	r3, [r2, #4]
 80016f6:	f023 0308 	bic.w	r3, r3, #8
 80016fa:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80016fc:	f7ff f902 	bl	8000904 <HAL_GetTick>
 8001700:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001702:	e005      	b.n	8001710 <HAL_RTC_Init+0x34>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001704:	f7ff f8fe 	bl	8000904 <HAL_GetTick>
 8001708:	1b40      	subs	r0, r0, r5
 800170a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800170e:	d851      	bhi.n	80017b4 <HAL_RTC_Init+0xd8>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	0718      	lsls	r0, r3, #28
 8001716:	d5f5      	bpl.n	8001704 <HAL_RTC_Init+0x28>
  tickstart = HAL_GetTick();
 8001718:	f7ff f8f4 	bl	8000904 <HAL_GetTick>
 800171c:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800171e:	e005      	b.n	800172c <HAL_RTC_Init+0x50>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001720:	f7ff f8f0 	bl	8000904 <HAL_GetTick>
 8001724:	1b40      	subs	r0, r0, r5
 8001726:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800172a:	d843      	bhi.n	80017b4 <HAL_RTC_Init+0xd8>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	0691      	lsls	r1, r2, #26
 8001732:	d5f5      	bpl.n	8001720 <HAL_RTC_Init+0x44>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001734:	6859      	ldr	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001736:	68a0      	ldr	r0, [r4, #8]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001738:	f041 0110 	orr.w	r1, r1, #16
 800173c:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	f021 0107 	bic.w	r1, r1, #7
 8001744:	6059      	str	r1, [r3, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001746:	b120      	cbz	r0, 8001752 <HAL_RTC_Init+0x76>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001748:	4923      	ldr	r1, [pc, #140]	; (80017d8 <HAL_RTC_Init+0xfc>)
 800174a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800174c:	f022 0201 	bic.w	r2, r2, #1
 8001750:	630a      	str	r2, [r1, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001752:	4921      	ldr	r1, [pc, #132]	; (80017d8 <HAL_RTC_Init+0xfc>)
 8001754:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8001756:	f422 7260 	bic.w	r2, r2, #896	; 0x380
 800175a:	4302      	orrs	r2, r0
 800175c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800175e:	6861      	ldr	r1, [r4, #4]
 8001760:	1c4a      	adds	r2, r1, #1
 8001762:	d02f      	beq.n	80017c4 <HAL_RTC_Init+0xe8>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001764:	6898      	ldr	r0, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001766:	b28d      	uxth	r5, r1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001768:	f020 000f 	bic.w	r0, r0, #15
 800176c:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 8001770:	6099      	str	r1, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	0c12      	lsrs	r2, r2, #16
 8001776:	0412      	lsls	r2, r2, #16
 8001778:	432a      	orrs	r2, r5
 800177a:	60da      	str	r2, [r3, #12]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	f022 0210 	bic.w	r2, r2, #16
 8001782:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8001784:	f7ff f8be 	bl	8000904 <HAL_GetTick>
 8001788:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800178a:	e005      	b.n	8001798 <HAL_RTC_Init+0xbc>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800178c:	f7ff f8ba 	bl	8000904 <HAL_GetTick>
 8001790:	1b40      	subs	r0, r0, r5
 8001792:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001796:	d80d      	bhi.n	80017b4 <HAL_RTC_Init+0xd8>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	069b      	lsls	r3, r3, #26
 800179e:	d5f5      	bpl.n	800178c <HAL_RTC_Init+0xb0>
    hrtc->DateToUpdate.Year = 0x00U;
 80017a0:	2300      	movs	r3, #0
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80017a2:	f240 1101 	movw	r1, #257	; 0x101
    hrtc->State = HAL_RTC_STATE_READY;
 80017a6:	2201      	movs	r2, #1
    hrtc->DateToUpdate.Year = 0x00U;
 80017a8:	73e3      	strb	r3, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80017aa:	f8a4 100d 	strh.w	r1, [r4, #13]
    hrtc->State = HAL_RTC_STATE_READY;
 80017ae:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 80017b0:	4618      	mov	r0, r3
}
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->State = HAL_RTC_STATE_ERROR;
 80017b4:	2304      	movs	r3, #4
 80017b6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
}
 80017ba:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80017bc:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80017be:	f7fe ff8f 	bl	80006e0 <HAL_RTC_MspInit>
 80017c2:	e794      	b.n	80016ee <HAL_RTC_Init+0x12>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fedf 	bl	8001588 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d0f2      	beq.n	80017b4 <HAL_RTC_Init+0xd8>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80017ce:	6823      	ldr	r3, [r4, #0]
        prescaler = prescaler - 1U;
 80017d0:	1e41      	subs	r1, r0, #1
 80017d2:	e7c7      	b.n	8001764 <HAL_RTC_Init+0x88>
    return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
}
 80017d6:	4770      	bx	lr
 80017d8:	40006c00 	.word	0x40006c00

080017dc <HAL_RTC_SetTime>:
  if ((hrtc == NULL) || (sTime == NULL))
 80017dc:	2800      	cmp	r0, #0
 80017de:	f000 8085 	beq.w	80018ec <HAL_RTC_SetTime+0x110>
 80017e2:	2900      	cmp	r1, #0
 80017e4:	f000 8082 	beq.w	80018ec <HAL_RTC_SetTime+0x110>
{
 80017e8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 80017ea:	7c03      	ldrb	r3, [r0, #16]
 80017ec:	4604      	mov	r4, r0
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d07e      	beq.n	80018f0 <HAL_RTC_SetTime+0x114>
 80017f2:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017f4:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 80017f6:	7420      	strb	r0, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80017f8:	7463      	strb	r3, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 80017fa:	2a00      	cmp	r2, #0
 80017fc:	d05b      	beq.n	80018b6 <HAL_RTC_SetTime+0xda>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80017fe:	f44f 6661 	mov.w	r6, #3600	; 0xe10
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001802:	784a      	ldrb	r2, [r1, #1]
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001804:	7808      	ldrb	r0, [r1, #0]
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001806:	0913      	lsrs	r3, r2, #4
 8001808:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800180c:	f002 030f 	and.w	r3, r2, #15
 8001810:	eb03 0345 	add.w	r3, r3, r5, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001814:	b2db      	uxtb	r3, r3
 8001816:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800181a:	009d      	lsls	r5, r3, #2
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800181c:	0903      	lsrs	r3, r0, #4
 800181e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001822:	f000 030f 	and.w	r3, r0, #15
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001826:	7889      	ldrb	r1, [r1, #2]
  return (tmp + (Value & (uint8_t)0x0F));
 8001828:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800182c:	b2db      	uxtb	r3, r3
 800182e:	fb06 5503 	mla	r5, r6, r3, r5
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001832:	090b      	lsrs	r3, r1, #4
 8001834:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001838:	f001 030f 	and.w	r3, r1, #15
 800183c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001840:	b2db      	uxtb	r3, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001842:	441d      	add	r5, r3
  tickstart = HAL_GetTick();
 8001844:	f7ff f85e 	bl	8000904 <HAL_GetTick>
 8001848:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800184a:	e005      	b.n	8001858 <HAL_RTC_SetTime+0x7c>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800184c:	f7ff f85a 	bl	8000904 <HAL_GetTick>
 8001850:	1b83      	subs	r3, r0, r6
 8001852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001856:	d843      	bhi.n	80018e0 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	0691      	lsls	r1, r2, #26
 800185e:	d5f5      	bpl.n	800184c <HAL_RTC_SetTime+0x70>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001860:	6859      	ldr	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001862:	0c2a      	lsrs	r2, r5, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001864:	f041 0110 	orr.w	r1, r1, #16
 8001868:	6059      	str	r1, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800186a:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800186c:	b2aa      	uxth	r2, r5
 800186e:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	f022 0210 	bic.w	r2, r2, #16
 8001876:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8001878:	f7ff f844 	bl	8000904 <HAL_GetTick>
 800187c:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800187e:	e005      	b.n	800188c <HAL_RTC_SetTime+0xb0>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001880:	f7ff f840 	bl	8000904 <HAL_GetTick>
 8001884:	1b80      	subs	r0, r0, r6
 8001886:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800188a:	d829      	bhi.n	80018e0 <HAL_RTC_SetTime+0x104>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	0692      	lsls	r2, r2, #26
 8001892:	d5f5      	bpl.n	8001880 <HAL_RTC_SetTime+0xa4>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	f022 0205 	bic.w	r2, r2, #5
 800189a:	605a      	str	r2, [r3, #4]
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800189c:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800189e:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 80018a0:	b289      	uxth	r1, r1
 80018a2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 80018a6:	428d      	cmp	r5, r1
 80018a8:	d811      	bhi.n	80018ce <HAL_RTC_SetTime+0xf2>
    __HAL_UNLOCK(hrtc);
 80018aa:	2300      	movs	r3, #0
    hrtc->State = HAL_RTC_STATE_READY;
 80018ac:	2201      	movs	r2, #1
    __HAL_UNLOCK(hrtc);
 80018ae:	7423      	strb	r3, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 80018b0:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 80018b2:	4618      	mov	r0, r3
}
 80018b4:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018b6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
                              ((uint32_t)sTime->Minutes * 60U) + \
 80018ba:	784b      	ldrb	r3, [r1, #1]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018bc:	780a      	ldrb	r2, [r1, #0]
                              ((uint32_t)sTime->Minutes * 60U) + \
 80018be:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80018c2:	009d      	lsls	r5, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018c4:	fb00 5502 	mla	r5, r0, r2, r5
                              ((uint32_t)sTime->Seconds));
 80018c8:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018ca:	441d      	add	r5, r3
 80018cc:	e7ba      	b.n	8001844 <HAL_RTC_SetTime+0x68>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80018ce:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 80018d2:	4620      	mov	r0, r4
 80018d4:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80018d8:	f7ff fed0 	bl	800167c <RTC_WriteAlarmCounter>
 80018dc:	2800      	cmp	r0, #0
 80018de:	d0e4      	beq.n	80018aa <HAL_RTC_SetTime+0xce>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80018e0:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 80018e2:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 80018e4:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 80018e6:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
}
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80018ec:	2001      	movs	r0, #1
}
 80018ee:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80018f0:	2002      	movs	r0, #2
}
 80018f2:	bd70      	pop	{r4, r5, r6, pc}

080018f4 <HAL_RTC_SetDate>:
  if ((hrtc == NULL) || (sDate == NULL))
 80018f4:	2800      	cmp	r0, #0
 80018f6:	f000 808f 	beq.w	8001a18 <HAL_RTC_SetDate+0x124>
 80018fa:	2900      	cmp	r1, #0
 80018fc:	f000 808c 	beq.w	8001a18 <HAL_RTC_SetDate+0x124>
{
 8001900:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hrtc);
 8001902:	7c03      	ldrb	r3, [r0, #16]
 8001904:	4604      	mov	r4, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	f000 80d3 	beq.w	8001ab2 <HAL_RTC_SetDate+0x1be>
 800190c:	2001      	movs	r0, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 800190e:	2302      	movs	r3, #2
  __HAL_LOCK(hrtc);
 8001910:	7420      	strb	r0, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001912:	7463      	strb	r3, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 8001914:	2a00      	cmp	r2, #0
 8001916:	d05d      	beq.n	80019d4 <HAL_RTC_SetDate+0xe0>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001918:	78cb      	ldrb	r3, [r1, #3]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800191a:	ea4f 1c13 	mov.w	ip, r3, lsr #4
 800191e:	eb0c 028c 	add.w	r2, ip, ip, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001922:	f003 0c0f 	and.w	ip, r3, #15
 8001926:	eb0c 0c42 	add.w	ip, ip, r2, lsl #1
 800192a:	fa5f fc8c 	uxtb.w	ip, ip
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800192e:	f884 c00f 	strb.w	ip, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001932:	784b      	ldrb	r3, [r1, #1]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001934:	0918      	lsrs	r0, r3, #4
 8001936:	eb00 0280 	add.w	r2, r0, r0, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 800193a:	f003 000f 	and.w	r0, r3, #15
 800193e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8001942:	b2c0      	uxtb	r0, r0
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001944:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001946:	788a      	ldrb	r2, [r1, #2]
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;

  if (nMonth < 3U)
 8001948:	2802      	cmp	r0, #2
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 800194a:	ea4f 1312 	mov.w	r3, r2, lsr #4
 800194e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001952:	f002 030f 	and.w	r3, r2, #15
 8001956:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 800195a:	b2db      	uxtb	r3, r3
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800195c:	73a3      	strb	r3, [r4, #14]
  year = 2000U + nYear;
 800195e:	f50c 62fa 	add.w	r2, ip, #2000	; 0x7d0
  if (nMonth < 3U)
 8001962:	d845      	bhi.n	80019f0 <HAL_RTC_SetDate+0xfc>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001964:	3304      	adds	r3, #4
 8001966:	4413      	add	r3, r2
 8001968:	4d53      	ldr	r5, [pc, #332]	; (8001ab8 <HAL_RTC_SetDate+0x1c4>)
 800196a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800196e:	ebc0 00c2 	rsb	r0, r0, r2, lsl #3
 8001972:	fba5 2000 	umull	r2, r0, r5, r0
 8001976:	4a51      	ldr	r2, [pc, #324]	; (8001abc <HAL_RTC_SetDate+0x1c8>)
 8001978:	f20c 7ccf 	addw	ip, ip, #1999	; 0x7cf
 800197c:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8001980:	eb03 039c 	add.w	r3, r3, ip, lsr #2
 8001984:	fba2 2c0c 	umull	r2, ip, r2, ip
 8001988:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_RTC_SetDate+0x1cc>)
 800198a:	eb03 13dc 	add.w	r3, r3, ip, lsr #7
 800198e:	eba3 135c 	sub.w	r3, r3, ip, lsr #5
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001992:	fba2 0203 	umull	r0, r2, r2, r3
 8001996:	1a98      	subs	r0, r3, r2
 8001998:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800199c:	0892      	lsrs	r2, r2, #2
 800199e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80019a2:	1a9a      	subs	r2, r3, r2
  }

  return (uint8_t)weekday;
 80019a4:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80019a6:	7322      	strb	r2, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80019a8:	700a      	strb	r2, [r1, #0]
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	6999      	ldr	r1, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80019ae:	69dd      	ldr	r5, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80019b0:	699a      	ldr	r2, [r3, #24]
  if (high1 != high2)
 80019b2:	b28e      	uxth	r6, r1
 80019b4:	b290      	uxth	r0, r2
 80019b6:	4286      	cmp	r6, r0
 80019b8:	d030      	beq.n	8001a1c <HAL_RTC_SetDate+0x128>
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80019ba:	69dd      	ldr	r5, [r3, #28]
  if (hours > 24U)
 80019bc:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RTC_SetDate+0x1d0>)
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80019be:	b2ad      	uxth	r5, r5
 80019c0:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  if (hours > 24U)
 80019c4:	429d      	cmp	r5, r3
 80019c6:	d82f      	bhi.n	8001a28 <HAL_RTC_SetDate+0x134>
  __HAL_UNLOCK(hrtc);
 80019c8:	2300      	movs	r3, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 80019ca:	2201      	movs	r2, #1
  __HAL_UNLOCK(hrtc);
 80019cc:	7423      	strb	r3, [r4, #16]
  hrtc->State = HAL_RTC_STATE_READY ;
 80019ce:	7462      	strb	r2, [r4, #17]
  return HAL_OK;
 80019d0:	4618      	mov	r0, r3
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = sDate->Year;
 80019d4:	f891 c003 	ldrb.w	ip, [r1, #3]
 80019d8:	f884 c00f 	strb.w	ip, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80019dc:	7848      	ldrb	r0, [r1, #1]
 80019de:	f8b1 2001 	ldrh.w	r2, [r1, #1]
  if (nMonth < 3U)
 80019e2:	2802      	cmp	r0, #2
    hrtc->DateToUpdate.Date  = sDate->Date;
 80019e4:	788b      	ldrb	r3, [r1, #2]
    hrtc->DateToUpdate.Month = sDate->Month;
 80019e6:	f8a4 200d 	strh.w	r2, [r4, #13]
  year = 2000U + nYear;
 80019ea:	f50c 62fa 	add.w	r2, ip, #2000	; 0x7d0
  if (nMonth < 3U)
 80019ee:	d9b9      	bls.n	8001964 <HAL_RTC_SetDate+0x70>
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80019f0:	4d31      	ldr	r5, [pc, #196]	; (8001ab8 <HAL_RTC_SetDate+0x1c4>)
 80019f2:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 80019f6:	ebc0 00c6 	rsb	r0, r0, r6, lsl #3
 80019fa:	fba5 5000 	umull	r5, r0, r5, r0
 80019fe:	3307      	adds	r3, #7
 8001a00:	4413      	add	r3, r2
 8001a02:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8001a06:	482d      	ldr	r0, [pc, #180]	; (8001abc <HAL_RTC_SetDate+0x1c8>)
 8001a08:	eb03 0392 	add.w	r3, r3, r2, lsr #2
 8001a0c:	fba0 2002 	umull	r2, r0, r0, r2
 8001a10:	4a2b      	ldr	r2, [pc, #172]	; (8001ac0 <HAL_RTC_SetDate+0x1cc>)
 8001a12:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 8001a16:	e7bc      	b.n	8001992 <HAL_RTC_SetDate+0x9e>
    return HAL_ERROR;
 8001a18:	2001      	movs	r0, #1
}
 8001a1a:	4770      	bx	lr
  if (hours > 24U)
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_RTC_SetDate+0x1d0>)
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001a1e:	b2ad      	uxth	r5, r5
 8001a20:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
  if (hours > 24U)
 8001a24:	429d      	cmp	r5, r3
 8001a26:	d9cf      	bls.n	80019c8 <HAL_RTC_SetDate+0xd4>
  tickstart = HAL_GetTick();
 8001a28:	f7fe ff6c 	bl	8000904 <HAL_GetTick>
 8001a2c:	4606      	mov	r6, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a2e:	e005      	b.n	8001a3c <HAL_RTC_SetDate+0x148>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001a30:	f7fe ff68 	bl	8000904 <HAL_GetTick>
 8001a34:	1b80      	subs	r0, r0, r6
 8001a36:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a3a:	d834      	bhi.n	8001aa6 <HAL_RTC_SetDate+0x1b2>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	0691      	lsls	r1, r2, #26
 8001a42:	d5f5      	bpl.n	8001a30 <HAL_RTC_SetDate+0x13c>
 8001a44:	4e20      	ldr	r6, [pc, #128]	; (8001ac8 <HAL_RTC_SetDate+0x1d4>)
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_RTC_SetDate+0x1d8>)
 8001a48:	fba6 1605 	umull	r1, r6, r6, r5
 8001a4c:	0c36      	lsrs	r6, r6, #16
 8001a4e:	fb02 5616 	mls	r6, r2, r6, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a52:	685a      	ldr	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001a54:	0c31      	lsrs	r1, r6, #16
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a56:	f042 0210 	orr.w	r2, r2, #16
 8001a5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001a5c:	b2b2      	uxth	r2, r6
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001a5e:	6199      	str	r1, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001a60:	61da      	str	r2, [r3, #28]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	f022 0210 	bic.w	r2, r2, #16
 8001a68:	605a      	str	r2, [r3, #4]
  tickstart = HAL_GetTick();
 8001a6a:	f7fe ff4b 	bl	8000904 <HAL_GetTick>
 8001a6e:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a70:	e005      	b.n	8001a7e <HAL_RTC_SetDate+0x18a>
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001a72:	f7fe ff47 	bl	8000904 <HAL_GetTick>
 8001a76:	1b40      	subs	r0, r0, r5
 8001a78:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001a7c:	d813      	bhi.n	8001aa6 <HAL_RTC_SetDate+0x1b2>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	0692      	lsls	r2, r2, #26
 8001a84:	d5f5      	bpl.n	8001a72 <HAL_RTC_SetDate+0x17e>
  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001a86:	6a1a      	ldr	r2, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (((uint32_t) high1 << 16U) | low);
 8001a8a:	b289      	uxth	r1, r1
 8001a8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
      if (counter_alarm < counter_time)
 8001a90:	428e      	cmp	r6, r1
 8001a92:	d999      	bls.n	80019c8 <HAL_RTC_SetDate+0xd4>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a94:	f501 31a8 	add.w	r1, r1, #86016	; 0x15000
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001a9e:	f7ff fded 	bl	800167c <RTC_WriteAlarmCounter>
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d090      	beq.n	80019c8 <HAL_RTC_SetDate+0xd4>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001aa6:	2204      	movs	r2, #4
          __HAL_UNLOCK(hrtc);
 8001aa8:	2300      	movs	r3, #0
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001aaa:	7462      	strb	r2, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8001aac:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8001aae:	2001      	movs	r0, #1
}
 8001ab0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hrtc);
 8001ab2:	2002      	movs	r0, #2
}
 8001ab4:	bd70      	pop	{r4, r5, r6, pc}
 8001ab6:	bf00      	nop
 8001ab8:	38e38e39 	.word	0x38e38e39
 8001abc:	51eb851f 	.word	0x51eb851f
 8001ac0:	24924925 	.word	0x24924925
 8001ac4:	00015f8f 	.word	0x00015f8f
 8001ac8:	c22e4507 	.word	0xc22e4507
 8001acc:	00015180 	.word	0x00015180

08001ad0 <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad4:	461d      	mov	r5, r3
 8001ad6:	4616      	mov	r6, r2
 8001ad8:	b082      	sub	sp, #8
 8001ada:	460c      	mov	r4, r1
 8001adc:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001ade:	f7fe ff11 	bl	8000904 <HAL_GetTick>
 8001ae2:	4435      	add	r5, r6
 8001ae4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001ae6:	f7fe ff0d 	bl	8000904 <HAL_GetTick>
 8001aea:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8001af4:	fb05 f303 	mul.w	r3, r5, r3
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	1c73      	adds	r3, r6, #1

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	d107      	bne.n	8001b10 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x40>
 8001b00:	688b      	ldr	r3, [r1, #8]
 8001b02:	ea34 0303 	bics.w	r3, r4, r3
 8001b06:	d0fb      	beq.n	8001b00 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8001b08:	2000      	movs	r0, #0
}
 8001b0a:	b002      	add	sp, #8
 8001b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b10:	688b      	ldr	r3, [r1, #8]
 8001b12:	ea34 0303 	bics.w	r3, r4, r3
 8001b16:	d1f7      	bne.n	8001b08 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001b18:	f7fe fef4 	bl	8000904 <HAL_GetTick>
 8001b1c:	eba0 0308 	sub.w	r3, r0, r8
 8001b20:	42ab      	cmp	r3, r5
 8001b22:	d207      	bcs.n	8001b34 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x64>
      if(count == 0U)
 8001b24:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001b26:	2b00      	cmp	r3, #0
      count--;
 8001b28:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001b2a:	bf08      	it	eq
 8001b2c:	2500      	moveq	r5, #0
      count--;
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	e7e2      	b.n	8001afa <SPI_WaitFlagStateUntilTimeout.constprop.1+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b34:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b38:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b3a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001b3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001b42:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b44:	d014      	beq.n	8001b70 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b48:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001b4c:	d007      	beq.n	8001b5e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x8e>
        hspi->State = HAL_SPI_STATE_READY;
 8001b4e:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8001b50:	2300      	movs	r3, #0
 8001b52:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8001b54:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001b58:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8001b5c:	e7d5      	b.n	8001b0a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
          SPI_RESET_CRC(hspi);
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e7ee      	b.n	8001b4e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b76:	d002      	beq.n	8001b7e <SPI_WaitFlagStateUntilTimeout.constprop.1+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001b78:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001b7c:	d1e3      	bne.n	8001b46 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x76>
          __HAL_SPI_DISABLE(hspi);
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	e7de      	b.n	8001b46 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x76>
 8001b88:	20000000 	.word	0x20000000

08001b8c <HAL_SPI_Init>:
  if (hspi == NULL)
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d058      	beq.n	8001c42 <HAL_SPI_Init+0xb6>
{
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b92:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b94:	4604      	mov	r4, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba0:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ba2:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ba8:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	d03f      	beq.n	8001c30 <HAL_SPI_Init+0xa4>
 8001bb0:	469c      	mov	ip, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bb2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bb6:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8001bb8:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bbc:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bbe:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8001bc2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	68e2      	ldr	r2, [r4, #12]
 8001bca:	69a0      	ldr	r0, [r4, #24]
 8001bcc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bd4:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bd8:	4032      	ands	r2, r6
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8001bde:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001be0:	ea02 020e 	and.w	r2, r2, lr
 8001be4:	431a      	orrs	r2, r3
 8001be6:	69e3      	ldr	r3, [r4, #28]
 8001be8:	6a26      	ldr	r6, [r4, #32]
 8001bea:	f003 0738 	and.w	r7, r3, #56	; 0x38
 8001bee:	f400 7300 	and.w	r3, r0, #512	; 0x200
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8001bf8:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bfa:	433b      	orrs	r3, r7
 8001bfc:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bfe:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c00:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c04:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8001c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0c:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c0e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c10:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c12:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8001c14:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c1a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c1c:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c1e:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c24:	6842      	ldr	r2, [r0, #4]
 8001c26:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001c2a:	d0b9      	beq.n	8001ba0 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c2c:	61c3      	str	r3, [r0, #28]
 8001c2e:	e7b7      	b.n	8001ba0 <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8001c30:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8001c32:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001c36:	f7fe fd73 	bl	8000720 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001c3c:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8001c40:	e7b7      	b.n	8001bb2 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8001c42:	2001      	movs	r0, #1
}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop

08001c48 <HAL_SPI_Transmit>:
{
 8001c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c4c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8001c4e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001c52:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d074      	beq.n	8001d42 <HAL_SPI_Transmit+0xfa>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 8001c60:	4688      	mov	r8, r1
 8001c62:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 8001c64:	f7fe fe4e 	bl	8000904 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c68:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8001c6c:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	b2d8      	uxtb	r0, r3
 8001c72:	d009      	beq.n	8001c88 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8001c74:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8001c76:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8001c78:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8001c7a:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001c7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001c82:	b002      	add	sp, #8
 8001c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8001c88:	f1b8 0f00 	cmp.w	r8, #0
 8001c8c:	d0f3      	beq.n	8001c76 <HAL_SPI_Transmit+0x2e>
 8001c8e:	2f00      	cmp	r7, #0
 8001c90:	d0f1      	beq.n	8001c76 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c92:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c94:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c96:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c98:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->RxXferSize  = 0U;
 8001c9c:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c9e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8001ca0:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 8001ca2:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ca4:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 8001ca6:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ca8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8001caa:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8001cb0:	4602      	mov	r2, r0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001cb2:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cb6:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cb8:	d076      	beq.n	8001da8 <HAL_SPI_Transmit+0x160>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cba:	6803      	ldr	r3, [r0, #0]
 8001cbc:	065b      	lsls	r3, r3, #25
 8001cbe:	d403      	bmi.n	8001cc8 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc6:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cc8:	68e3      	ldr	r3, [r4, #12]
 8001cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cce:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001cd0:	d03b      	beq.n	8001d4a <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 808a 	beq.w	8001dec <HAL_SPI_Transmit+0x1a4>
 8001cd8:	2f01      	cmp	r7, #1
 8001cda:	f000 8087 	beq.w	8001dec <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 8001cde:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	b1bb      	cbz	r3, 8001d14 <HAL_SPI_Transmit+0xcc>
 8001ce4:	2d00      	cmp	r5, #0
 8001ce6:	f000 80be 	beq.w	8001e66 <HAL_SPI_Transmit+0x21e>
 8001cea:	1c6f      	adds	r7, r5, #1
 8001cec:	d173      	bne.n	8001dd6 <HAL_SPI_Transmit+0x18e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	0790      	lsls	r0, r2, #30
 8001cf4:	f140 8085 	bpl.w	8001e02 <HAL_SPI_Transmit+0x1ba>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001cfe:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d00:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d02:	3901      	subs	r1, #1
 8001d04:	b289      	uxth	r1, r1
 8001d06:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d08:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d0a:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8001d0c:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d0e:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001d10:	2900      	cmp	r1, #0
 8001d12:	d1ec      	bne.n	8001cee <HAL_SPI_Transmit+0xa6>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d14:	4633      	mov	r3, r6
 8001d16:	462a      	mov	r2, r5
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fed8 	bl	8001ad0 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8001d20:	2800      	cmp	r0, #0
 8001d22:	f040 80b9 	bne.w	8001e98 <HAL_SPI_Transmit+0x250>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d26:	68a3      	ldr	r3, [r4, #8]
 8001d28:	b933      	cbnz	r3, 8001d38 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	68d3      	ldr	r3, [r2, #12]
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	6893      	ldr	r3, [r2, #8]
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d38:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001d3a:	3800      	subs	r0, #0
 8001d3c:	bf18      	it	ne
 8001d3e:	2001      	movne	r0, #1
error:
 8001d40:	e799      	b.n	8001c76 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 8001d42:	2002      	movs	r0, #2
}
 8001d44:	b002      	add	sp, #8
 8001d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d179      	bne.n	8001e42 <HAL_SPI_Transmit+0x1fa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d4e:	4641      	mov	r1, r8
 8001d50:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001d54:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8001d56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d58:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d60:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0d5      	beq.n	8001d14 <HAL_SPI_Transmit+0xcc>
 8001d68:	2d00      	cmp	r5, #0
 8001d6a:	f000 8091 	beq.w	8001e90 <HAL_SPI_Transmit+0x248>
 8001d6e:	1c69      	adds	r1, r5, #1
 8001d70:	d15e      	bne.n	8001e30 <HAL_SPI_Transmit+0x1e8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d72:	6883      	ldr	r3, [r0, #8]
 8001d74:	079a      	lsls	r2, r3, #30
 8001d76:	d50f      	bpl.n	8001d98 <HAL_SPI_Transmit+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d78:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d7a:	f832 3b02 	ldrh.w	r3, [r2], #2
 8001d7e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001d80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d82:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0c0      	beq.n	8001d14 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d92:	6883      	ldr	r3, [r0, #8]
 8001d94:	079a      	lsls	r2, r3, #30
 8001d96:	d4ef      	bmi.n	8001d78 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d98:	f7fe fdb4 	bl	8000904 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001d9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0b7      	beq.n	8001d14 <HAL_SPI_Transmit+0xcc>
 8001da4:	6820      	ldr	r0, [r4, #0]
 8001da6:	e7e4      	b.n	8001d72 <HAL_SPI_Transmit+0x12a>
    __HAL_SPI_DISABLE(hspi);
 8001da8:	6803      	ldr	r3, [r0, #0]
 8001daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dae:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 8001db0:	6803      	ldr	r3, [r0, #0]
 8001db2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db6:	6003      	str	r3, [r0, #0]
 8001db8:	e77f      	b.n	8001cba <HAL_SPI_Transmit+0x72>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001dbc:	7812      	ldrb	r2, [r2, #0]
 8001dbe:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001dc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dc2:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001dc4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dc6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dcc:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001dce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d09e      	beq.n	8001d14 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001dd6:	6823      	ldr	r3, [r4, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	0791      	lsls	r1, r2, #30
 8001ddc:	d4ed      	bmi.n	8001dba <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dde:	f7fe fd91 	bl	8000904 <HAL_GetTick>
 8001de2:	1b83      	subs	r3, r0, r6
 8001de4:	429d      	cmp	r5, r3
 8001de6:	d8f2      	bhi.n	8001dce <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8001de8:	2003      	movs	r0, #3
 8001dea:	e744      	b.n	8001c76 <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dec:	f898 3000 	ldrb.w	r3, [r8]
 8001df0:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8001df2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001df4:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001df6:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001df8:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8001dfa:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001dfc:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001dfe:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001e00:	e76d      	b.n	8001cde <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e02:	f7fe fd7f 	bl	8000904 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001e06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f47f af6f 	bne.w	8001cee <HAL_SPI_Transmit+0xa6>
 8001e10:	e780      	b.n	8001d14 <HAL_SPI_Transmit+0xcc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e12:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001e14:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001e18:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8001e1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1c:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e24:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f43f af73 	beq.w	8001d14 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e2e:	6822      	ldr	r2, [r4, #0]
 8001e30:	6893      	ldr	r3, [r2, #8]
 8001e32:	079b      	lsls	r3, r3, #30
 8001e34:	d4ed      	bmi.n	8001e12 <HAL_SPI_Transmit+0x1ca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e36:	f7fe fd65 	bl	8000904 <HAL_GetTick>
 8001e3a:	1b83      	subs	r3, r0, r6
 8001e3c:	429d      	cmp	r5, r3
 8001e3e:	d9d3      	bls.n	8001de8 <HAL_SPI_Transmit+0x1a0>
 8001e40:	e7f0      	b.n	8001e24 <HAL_SPI_Transmit+0x1dc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e42:	2f01      	cmp	r7, #1
 8001e44:	d18c      	bne.n	8001d60 <HAL_SPI_Transmit+0x118>
 8001e46:	e782      	b.n	8001d4e <HAL_SPI_Transmit+0x106>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e4a:	7812      	ldrb	r2, [r2, #0]
 8001e4c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001e4e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e50:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e5a:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8001e5c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e5e:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f43f af57 	beq.w	8001d14 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	0792      	lsls	r2, r2, #30
 8001e6c:	d4ec      	bmi.n	8001e48 <HAL_SPI_Transmit+0x200>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6e:	f7fe fd49 	bl	8000904 <HAL_GetTick>
 8001e72:	e7b9      	b.n	8001de8 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e76:	f832 3b02 	ldrh.w	r3, [r2], #2
 8001e7a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8001e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e7e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e80:	3b01      	subs	r3, #1
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f43f af42 	beq.w	8001d14 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e90:	6883      	ldr	r3, [r0, #8]
 8001e92:	079f      	lsls	r7, r3, #30
 8001e94:	d5eb      	bpl.n	8001e6e <HAL_SPI_Transmit+0x226>
 8001e96:	e7ed      	b.n	8001e74 <HAL_SPI_Transmit+0x22c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e98:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ea0:	6562      	str	r2, [r4, #84]	; 0x54
 8001ea2:	e740      	b.n	8001d26 <HAL_SPI_Transmit+0xde>

08001ea4 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	d066      	beq.n	8001f76 <HAL_TIM_PWM_Init+0xd2>
{
 8001ea8:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eaa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001eae:	4604      	mov	r4, r0
 8001eb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d045      	beq.n	8001f44 <HAL_TIM_PWM_Init+0xa0>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	2302      	movs	r3, #2

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eba:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ebc:	492f      	ldr	r1, [pc, #188]	; (8001f7c <HAL_TIM_PWM_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8001ec4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec6:	d042      	beq.n	8001f4e <HAL_TIM_PWM_Init+0xaa>
 8001ec8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001ecc:	d011      	beq.n	8001ef2 <HAL_TIM_PWM_Init+0x4e>
 8001ece:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8001ed2:	428a      	cmp	r2, r1
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_TIM_PWM_Init+0x4e>
 8001ed6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8001eda:	428a      	cmp	r2, r1
 8001edc:	d009      	beq.n	8001ef2 <HAL_TIM_PWM_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ede:	69a0      	ldr	r0, [r4, #24]
 8001ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ee4:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee6:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eea:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eec:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001eee:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef0:	e010      	b.n	8001f14 <HAL_TIM_PWM_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8001ef2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ef8:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001efa:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f00:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f02:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f08:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f0a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8001f0c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8001f0e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f10:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f12:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f14:	2301      	movs	r3, #1
 8001f16:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f18:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001f20:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8001f24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001f28:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001f38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001f3c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f40:	2000      	movs	r0, #0
}
 8001f42:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001f44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001f48:	f7fe fc1e 	bl	8000788 <HAL_TIM_PWM_MspInit>
 8001f4c:	e7b4      	b.n	8001eb8 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001f4e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f54:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 8001f56:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f5c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5e:	69a1      	ldr	r1, [r4, #24]
 8001f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f64:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8001f66:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	68e3      	ldr	r3, [r4, #12]
 8001f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f6c:	6863      	ldr	r3, [r4, #4]
 8001f6e:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001f70:	6963      	ldr	r3, [r4, #20]
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	e7ce      	b.n	8001f14 <HAL_TIM_PWM_Init+0x70>
    return HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	40012c00 	.word	0x40012c00

08001f80 <HAL_TIM_PWM_Start>:
 8001f80:	bb41      	cbnz	r1, 8001fd4 <HAL_TIM_PWM_Start+0x54>
 8001f82:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d138      	bne.n	8001ffc <HAL_TIM_PWM_Start+0x7c>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001f90:	2201      	movs	r2, #1
 8001f92:	6803      	ldr	r3, [r0, #0]
 8001f94:	f001 011f 	and.w	r1, r1, #31
 8001f98:	6a18      	ldr	r0, [r3, #32]
 8001f9a:	fa02 f101 	lsl.w	r1, r2, r1
 8001f9e:	ea20 0001 	bic.w	r0, r0, r1
 8001fa2:	b410      	push	{r4}
 8001fa4:	6218      	str	r0, [r3, #32]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	4c21      	ldr	r4, [pc, #132]	; (8002030 <HAL_TIM_PWM_Start+0xb0>)
 8001faa:	4311      	orrs	r1, r2
 8001fac:	42a3      	cmp	r3, r4
 8001fae:	6219      	str	r1, [r3, #32]
 8001fb0:	d026      	beq.n	8002000 <HAL_TIM_PWM_Start+0x80>
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d027      	beq.n	8002008 <HAL_TIM_PWM_Start+0x88>
 8001fb8:	4a1e      	ldr	r2, [pc, #120]	; (8002034 <HAL_TIM_PWM_Start+0xb4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d024      	beq.n	8002008 <HAL_TIM_PWM_Start+0x88>
 8001fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_PWM_Start+0x88>
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	bc10      	pop	{r4}
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	4770      	bx	lr
 8001fd4:	2904      	cmp	r1, #4
 8001fd6:	d01f      	beq.n	8002018 <HAL_TIM_PWM_Start+0x98>
 8001fd8:	2908      	cmp	r1, #8
 8001fda:	d00b      	beq.n	8001ff4 <HAL_TIM_PWM_Start+0x74>
 8001fdc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d10b      	bne.n	8001ffc <HAL_TIM_PWM_Start+0x7c>
 8001fe4:	2904      	cmp	r1, #4
 8001fe6:	d01b      	beq.n	8002020 <HAL_TIM_PWM_Start+0xa0>
 8001fe8:	2908      	cmp	r1, #8
 8001fea:	d01d      	beq.n	8002028 <HAL_TIM_PWM_Start+0xa8>
 8001fec:	2302      	movs	r3, #2
 8001fee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8001ff2:	e7cd      	b.n	8001f90 <HAL_TIM_PWM_Start+0x10>
 8001ff4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d015      	beq.n	8002028 <HAL_TIM_PWM_Start+0xa8>
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	4770      	bx	lr
 8002000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002006:	645a      	str	r2, [r3, #68]	; 0x44
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	f002 0207 	and.w	r2, r2, #7
 800200e:	2a06      	cmp	r2, #6
 8002010:	d1d9      	bne.n	8001fc6 <HAL_TIM_PWM_Start+0x46>
 8002012:	2000      	movs	r0, #0
 8002014:	bc10      	pop	{r4}
 8002016:	4770      	bx	lr
 8002018:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800201c:	2b01      	cmp	r3, #1
 800201e:	d1ed      	bne.n	8001ffc <HAL_TIM_PWM_Start+0x7c>
 8002020:	2302      	movs	r3, #2
 8002022:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002026:	e7b3      	b.n	8001f90 <HAL_TIM_PWM_Start+0x10>
 8002028:	2302      	movs	r3, #2
 800202a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800202e:	e7af      	b.n	8001f90 <HAL_TIM_PWM_Start+0x10>
 8002030:	40012c00 	.word	0x40012c00
 8002034:	40000400 	.word	0x40000400

08002038 <HAL_TIM_PWM_ConfigChannel>:
{
 8002038:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800203a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800203e:	2801      	cmp	r0, #1
 8002040:	f000 80c0 	beq.w	80021c4 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8002044:	2001      	movs	r0, #1
{
 8002046:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8002048:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 800204c:	2a0c      	cmp	r2, #12
 800204e:	d82d      	bhi.n	80020ac <HAL_TIM_PWM_ConfigChannel+0x74>
 8002050:	e8df f002 	tbb	[pc, r2]
 8002054:	2c2c2c07 	.word	0x2c2c2c07
 8002058:	2c2c2c60 	.word	0x2c2c2c60
 800205c:	2c2c2c8d 	.word	0x2c2c2c8d
 8002060:	32          	.byte	0x32
 8002061:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002062:	681a      	ldr	r2, [r3, #0]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002064:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002066:	6a10      	ldr	r0, [r2, #32]
 8002068:	f020 0001 	bic.w	r0, r0, #1
 800206c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800206e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002070:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8002072:	6994      	ldr	r4, [r2, #24]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002074:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002078:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800207c:	4334      	orrs	r4, r6
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800207e:	688e      	ldr	r6, [r1, #8]
 8002080:	4330      	orrs	r0, r6

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002082:	4e6a      	ldr	r6, [pc, #424]	; (800222c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8002084:	42b2      	cmp	r2, r6
 8002086:	f000 809f 	beq.w	80021c8 <HAL_TIM_PWM_ConfigChannel+0x190>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800208a:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800208c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800208e:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002090:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8002092:	6355      	str	r5, [r2, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002094:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002096:	6990      	ldr	r0, [r2, #24]
 8002098:	f040 0008 	orr.w	r0, r0, #8
 800209c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800209e:	6990      	ldr	r0, [r2, #24]
 80020a0:	f020 0004 	bic.w	r0, r0, #4
 80020a4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020a6:	6991      	ldr	r1, [r2, #24]
 80020a8:	4321      	orrs	r1, r4
 80020aa:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80020b2:	4610      	mov	r0, r2
}
 80020b4:	bcf0      	pop	{r4, r5, r6, r7}
 80020b6:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020b8:	681a      	ldr	r2, [r3, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020ba:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80020bc:	6a10      	ldr	r0, [r2, #32]
 80020be:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 80020c2:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80020c4:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80020c6:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80020c8:	69d4      	ldr	r4, [r2, #28]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020ca:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020ce:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020d2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020d6:	688e      	ldr	r6, [r1, #8]
 80020d8:	ea40 3006 	orr.w	r0, r0, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020dc:	4e53      	ldr	r6, [pc, #332]	; (800222c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 80020de:	42b2      	cmp	r2, r6
 80020e0:	f000 808e 	beq.w	8002200 <HAL_TIM_PWM_ConfigChannel+0x1c8>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e4:	6055      	str	r5, [r2, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020e6:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80020e8:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020ea:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR4 = OC_Config->Pulse;
 80020ec:	6415      	str	r5, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ee:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020f0:	69d0      	ldr	r0, [r2, #28]
 80020f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80020f6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020f8:	69d0      	ldr	r0, [r2, #28]
 80020fa:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80020fe:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002100:	69d1      	ldr	r1, [r2, #28]
 8002102:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8002106:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8002108:	2200      	movs	r2, #0
 800210a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 800210e:	4610      	mov	r0, r2
}
 8002110:	bcf0      	pop	{r4, r5, r6, r7}
 8002112:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002114:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002116:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002118:	6a10      	ldr	r0, [r2, #32]
 800211a:	f020 0010 	bic.w	r0, r0, #16
 800211e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8002120:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8002122:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8002124:	6994      	ldr	r4, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8002126:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800212a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800212e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002132:	688e      	ldr	r6, [r1, #8]
 8002134:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002138:	4e3c      	ldr	r6, [pc, #240]	; (800222c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 800213a:	42b2      	cmp	r2, r6
 800213c:	d051      	beq.n	80021e2 <HAL_TIM_PWM_ConfigChannel+0x1aa>
  TIMx->CR2 = tmpcr2;
 800213e:	6055      	str	r5, [r2, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8002140:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002142:	6194      	str	r4, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002144:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR2 = OC_Config->Pulse;
 8002146:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002148:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800214a:	6990      	ldr	r0, [r2, #24]
 800214c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002150:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002152:	6990      	ldr	r0, [r2, #24]
 8002154:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8002158:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800215a:	6991      	ldr	r1, [r2, #24]
 800215c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8002160:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8002162:	2200      	movs	r2, #0
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 8002168:	4610      	mov	r0, r2
}
 800216a:	bcf0      	pop	{r4, r5, r6, r7}
 800216c:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800216e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002170:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002172:	6a10      	ldr	r0, [r2, #32]
 8002174:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8002178:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 800217a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800217c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 800217e:	69d4      	ldr	r4, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002180:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002184:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002188:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800218a:	688e      	ldr	r6, [r1, #8]
 800218c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002190:	4e26      	ldr	r6, [pc, #152]	; (800222c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8002192:	42b2      	cmp	r2, r6
 8002194:	d03a      	beq.n	800220c <HAL_TIM_PWM_ConfigChannel+0x1d4>
  TIMx->CR2 = tmpcr2;
 8002196:	6055      	str	r5, [r2, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8002198:	684d      	ldr	r5, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800219a:	61d4      	str	r4, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800219c:	690c      	ldr	r4, [r1, #16]
  TIMx->CCR3 = OC_Config->Pulse;
 800219e:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80021a0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021a2:	69d0      	ldr	r0, [r2, #28]
 80021a4:	f040 0008 	orr.w	r0, r0, #8
 80021a8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021aa:	69d0      	ldr	r0, [r2, #28]
 80021ac:	f020 0004 	bic.w	r0, r0, #4
 80021b0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021b2:	69d1      	ldr	r1, [r2, #28]
 80021b4:	4321      	orrs	r1, r4
 80021b6:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  return HAL_OK;
 80021be:	4610      	mov	r0, r2
}
 80021c0:	bcf0      	pop	{r4, r5, r6, r7}
 80021c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80021c4:	2002      	movs	r0, #2
}
 80021c6:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80021c8:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80021ca:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 80021ce:	4330      	orrs	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021d0:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80021d4:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 80021d8:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80021da:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80021de:	4335      	orrs	r5, r6
 80021e0:	e753      	b.n	800208a <HAL_TIM_PWM_ConfigChannel+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021e2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80021e4:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021e8:	ea40 1006 	orr.w	r0, r0, r6, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021ec:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021f0:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 80021f4:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80021f6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021fa:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 80021fe:	e79e      	b.n	800213e <HAL_TIM_PWM_ConfigChannel+0x106>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002200:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002202:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002206:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 800220a:	e76b      	b.n	80020e4 <HAL_TIM_PWM_ConfigChannel+0xac>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800220c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800220e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002212:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002216:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800221a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
 800221e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8002220:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002224:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8002228:	e7b5      	b.n	8002196 <HAL_TIM_PWM_ConfigChannel+0x15e>
 800222a:	bf00      	nop
 800222c:	40012c00 	.word	0x40012c00

08002230 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002230:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002234:	2a01      	cmp	r2, #1
 8002236:	d027      	beq.n	8002288 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8002238:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223a:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800223c:	681a      	ldr	r2, [r3, #0]
{
 800223e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002244:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002246:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002248:	4d10      	ldr	r5, [pc, #64]	; (800228c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800224a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800224e:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002250:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8002252:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8002254:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002256:	d009      	beq.n	800226c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002258:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800225c:	d006      	beq.n	800226c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800225e:	480c      	ldr	r0, [pc, #48]	; (8002290 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002260:	4282      	cmp	r2, r0
 8002262:	d003      	beq.n	800226c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002264:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002268:	4282      	cmp	r2, r0
 800226a:	d104      	bne.n	8002276 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800226c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800226e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002272:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002274:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8002276:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8002278:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800227e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 8002282:	4610      	mov	r0, r2
}
 8002284:	bc30      	pop	{r4, r5}
 8002286:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002288:	2002      	movs	r0, #2
}
 800228a:	4770      	bx	lr
 800228c:	40012c00 	.word	0x40012c00
 8002290:	40000400 	.word	0x40000400

08002294 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002294:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d023      	beq.n	80022e4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
 800229c:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800229e:	e9d1 0302 	ldrd	r0, r3, [r1, #8]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80022a2:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022aa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022ac:	6848      	ldr	r0, [r1, #4]
 80022ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022b2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022b4:	6808      	ldr	r0, [r1, #0]
 80022b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022bc:	6908      	ldr	r0, [r1, #16]
 80022be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 80022c2:	b410      	push	{r4}
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022c4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022c6:	694c      	ldr	r4, [r1, #20]
 80022c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022cc:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022ce:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 80022d0:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d6:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 80022d8:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80022da:	f882 c03c 	strb.w	ip, [r2, #60]	; 0x3c

  return HAL_OK;
 80022de:	4660      	mov	r0, ip
}
 80022e0:	bc10      	pop	{r4}
 80022e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80022e4:	2002      	movs	r0, #2
}
 80022e6:	4770      	bx	lr

080022e8 <__libc_init_array>:
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	2600      	movs	r6, #0
 80022ec:	4d0c      	ldr	r5, [pc, #48]	; (8002320 <__libc_init_array+0x38>)
 80022ee:	4c0d      	ldr	r4, [pc, #52]	; (8002324 <__libc_init_array+0x3c>)
 80022f0:	1b64      	subs	r4, r4, r5
 80022f2:	10a4      	asrs	r4, r4, #2
 80022f4:	42a6      	cmp	r6, r4
 80022f6:	d109      	bne.n	800230c <__libc_init_array+0x24>
 80022f8:	f000 f822 	bl	8002340 <_init>
 80022fc:	2600      	movs	r6, #0
 80022fe:	4d0a      	ldr	r5, [pc, #40]	; (8002328 <__libc_init_array+0x40>)
 8002300:	4c0a      	ldr	r4, [pc, #40]	; (800232c <__libc_init_array+0x44>)
 8002302:	1b64      	subs	r4, r4, r5
 8002304:	10a4      	asrs	r4, r4, #2
 8002306:	42a6      	cmp	r6, r4
 8002308:	d105      	bne.n	8002316 <__libc_init_array+0x2e>
 800230a:	bd70      	pop	{r4, r5, r6, pc}
 800230c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002310:	4798      	blx	r3
 8002312:	3601      	adds	r6, #1
 8002314:	e7ee      	b.n	80022f4 <__libc_init_array+0xc>
 8002316:	f855 3b04 	ldr.w	r3, [r5], #4
 800231a:	4798      	blx	r3
 800231c:	3601      	adds	r6, #1
 800231e:	e7f2      	b.n	8002306 <__libc_init_array+0x1e>
 8002320:	08002394 	.word	0x08002394
 8002324:	08002394 	.word	0x08002394
 8002328:	08002394 	.word	0x08002394
 800232c:	08002398 	.word	0x08002398

08002330 <memset>:
 8002330:	4603      	mov	r3, r0
 8002332:	4402      	add	r2, r0
 8002334:	4293      	cmp	r3, r2
 8002336:	d100      	bne.n	800233a <memset+0xa>
 8002338:	4770      	bx	lr
 800233a:	f803 1b01 	strb.w	r1, [r3], #1
 800233e:	e7f9      	b.n	8002334 <memset+0x4>

08002340 <_init>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	bf00      	nop
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr

0800234c <_fini>:
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800234e:	bf00      	nop
 8002350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002352:	bc08      	pop	{r3}
 8002354:	469e      	mov	lr, r3
 8002356:	4770      	bx	lr
